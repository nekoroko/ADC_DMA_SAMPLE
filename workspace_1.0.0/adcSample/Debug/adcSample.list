
adcSample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004094  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800429c  0800429c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800429c  0800429c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08004314  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08004314  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffbc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e3a  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  00032768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018896  00000000  00000000  00032f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094a1  00000000  00000000  0004b7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086835  00000000  00000000  00054c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db4cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  000db548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800420c 	.word	0x0800420c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800420c 	.word	0x0800420c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_Init+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <HAL_Init+0x28>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000280:	2003      	movs	r0, #3
 8000282:	f001 f821 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f808 	bl	800029c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800028c:	f003 f9da 	bl	8003644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40022000 	.word	0x40022000

0800029c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_InitTick+0x54>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <HAL_InitTick+0x58>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f839 	bl	8001332 <HAL_SYSTICK_Config>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e00e      	b.n	80002e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d80a      	bhi.n	80002e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002d0:	2200      	movs	r2, #0
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f001 f801 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_InitTick+0x5c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e000      	b.n	80002e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000008 	.word	0x20000008
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	200000b8 	.word	0x200000b8

08000324 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  return uwTick;  
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <HAL_GetTick+0x14>)
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	200000b8 	.word	0x200000b8

0800033c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000344:	f7ff ffee 	bl	8000324 <HAL_GetTick>
 8000348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000354:	d005      	beq.n	8000362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Delay+0x40>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	461a      	mov	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4413      	add	r3, r2
 8000360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000362:	bf00      	nop
 8000364:	f7ff ffde 	bl	8000324 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8f7      	bhi.n	8000364 <HAL_Delay+0x28>
  {
  }
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000004 	.word	0x20000004

08000380 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09c      	sub	sp, #112	; 0x70
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80003ca:	2300      	movs	r3, #0
 80003cc:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80003d8:	2301      	movs	r3, #1
 80003da:	e170      	b.n	80006be <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	691b      	ldr	r3, [r3, #16]
 80003e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e6:	f003 0310 	and.w	r3, r3, #16
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d176      	bne.n	80004dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d152      	bne.n	800049c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2200      	movs	r2, #0
 80003fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f003 f93b 	bl	800368c <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d13b      	bne.n	800049c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 fe23 	bl	8001070 <ADC_Disable>
 800042a:	4603      	mov	r3, r0
 800042c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	2b00      	cmp	r3, #0
 800043a:	d12f      	bne.n	800049c <HAL_ADC_Init+0xe0>
 800043c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000440:	2b00      	cmp	r3, #0
 8000442:	d12b      	bne.n	800049c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000448:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800044c:	f023 0302 	bic.w	r3, r3, #2
 8000450:	f043 0202 	orr.w	r2, r3, #2
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	689a      	ldr	r2, [r3, #8]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000466:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000476:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000478:	4b93      	ldr	r3, [pc, #588]	; (80006c8 <HAL_ADC_Init+0x30c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a93      	ldr	r2, [pc, #588]	; (80006cc <HAL_ADC_Init+0x310>)
 800047e:	fba2 2303 	umull	r2, r3, r2, r3
 8000482:	0c9a      	lsrs	r2, r3, #18
 8000484:	4613      	mov	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800048e:	e002      	b.n	8000496 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3b01      	subs	r3, #1
 8000494:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d1f9      	bne.n	8000490 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d007      	beq.n	80004ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80004b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80004b8:	d110      	bne.n	80004dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004be:	f023 0312 	bic.w	r3, r3, #18
 80004c2:	f043 0210 	orr.w	r2, r3, #16
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	f043 0201 	orr.w	r2, r3, #1
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	f040 80dd 	bne.w	80006a4 <HAL_ADC_Init+0x2e8>
 80004ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	f040 80d8 	bne.w	80006a4 <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f040 80d0 	bne.w	80006a4 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000508:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800050c:	f043 0202 	orr.w	r2, r3, #2
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000514:	4b6e      	ldr	r3, [pc, #440]	; (80006d0 <HAL_ADC_Init+0x314>)
 8000516:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000520:	d102      	bne.n	8000528 <HAL_ADC_Init+0x16c>
 8000522:	4b6c      	ldr	r3, [pc, #432]	; (80006d4 <HAL_ADC_Init+0x318>)
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	e002      	b.n	800052e <HAL_ADC_Init+0x172>
 8000528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800052c:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f003 0303 	and.w	r3, r3, #3
 8000538:	2b01      	cmp	r3, #1
 800053a:	d108      	bne.n	800054e <HAL_ADC_Init+0x192>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b01      	cmp	r3, #1
 8000548:	d101      	bne.n	800054e <HAL_ADC_Init+0x192>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <HAL_ADC_Init+0x194>
 800054e:	2300      	movs	r3, #0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d11c      	bne.n	800058e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000554:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000556:	2b00      	cmp	r3, #0
 8000558:	d010      	beq.n	800057c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	2b01      	cmp	r3, #1
 8000564:	d107      	bne.n	8000576 <HAL_ADC_Init+0x1ba>
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b01      	cmp	r3, #1
 8000570:	d101      	bne.n	8000576 <HAL_ADC_Init+0x1ba>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <HAL_ADC_Init+0x1bc>
 8000576:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000578:	2b00      	cmp	r3, #0
 800057a:	d108      	bne.n	800058e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800057c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	431a      	orrs	r2, r3
 800058a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800058c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	035b      	lsls	r3, r3, #13
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000598:	2a01      	cmp	r2, #1
 800059a:	d002      	beq.n	80005a2 <HAL_ADC_Init+0x1e6>
 800059c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a0:	e000      	b.n	80005a4 <HAL_ADC_Init+0x1e8>
 80005a2:	2200      	movs	r2, #0
 80005a4:	431a      	orrs	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005b4:	4313      	orrs	r3, r2
 80005b6:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d11b      	bne.n	80005f8 <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d109      	bne.n	80005dc <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	3b01      	subs	r3, #1
 80005ce:	045a      	lsls	r2, r3, #17
 80005d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005d2:	4313      	orrs	r3, r2
 80005d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80005da:	e00d      	b.n	80005f8 <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80005e4:	f043 0220 	orr.w	r2, r3, #32
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f0:	f043 0201 	orr.w	r2, r3, #1
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d007      	beq.n	8000610 <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4313      	orrs	r3, r2
 800060a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800060c:	4313      	orrs	r3, r2
 800060e:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 030c 	and.w	r3, r3, #12
 800061a:	2b00      	cmp	r3, #0
 800061c:	d113      	bne.n	8000646 <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800062c:	f023 0302 	bic.w	r3, r3, #2
 8000630:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	039a      	lsls	r2, r3, #14
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4313      	orrs	r3, r2
 8000640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000642:	4313      	orrs	r3, r2
 8000644:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	68da      	ldr	r2, [r3, #12]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <HAL_ADC_Init+0x31c>)
 800064e:	4013      	ands	r3, r2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000656:	430b      	orrs	r3, r1
 8000658:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10c      	bne.n	800067c <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f023 010f 	bic.w	r1, r3, #15
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	430a      	orrs	r2, r1
 8000678:	631a      	str	r2, [r3, #48]	; 0x30
 800067a:	e007      	b.n	800068c <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f022 020f 	bic.w	r2, r2, #15
 800068a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f023 0303 	bic.w	r3, r3, #3
 800069a:	f043 0201 	orr.w	r2, r3, #1
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	645a      	str	r2, [r3, #68]	; 0x44
 80006a2:	e00a      	b.n	80006ba <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a8:	f023 0312 	bic.w	r3, r3, #18
 80006ac:	f043 0210 	orr.w	r2, r3, #16
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80006b4:	2301      	movs	r3, #1
 80006b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80006ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3770      	adds	r7, #112	; 0x70
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008
 80006cc:	431bde83 	.word	0x431bde83
 80006d0:	50000300 	.word	0x50000300
 80006d4:	50000100 	.word	0x50000100
 80006d8:	fff0c007 	.word	0xfff0c007

080006dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f040 80b9 	bne.w	800086e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000702:	2b01      	cmp	r3, #1
 8000704:	d101      	bne.n	800070a <HAL_ADC_Start_DMA+0x2e>
 8000706:	2302      	movs	r3, #2
 8000708:	e0b4      	b.n	8000874 <HAL_ADC_Start_DMA+0x198>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2201      	movs	r2, #1
 800070e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000712:	4b5a      	ldr	r3, [pc, #360]	; (800087c <HAL_ADC_Start_DMA+0x1a0>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	f040 80a0 	bne.w	8000860 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 fc47 	bl	8000fb4 <ADC_Enable>
 8000726:	4603      	mov	r3, r0
 8000728:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	2b00      	cmp	r3, #0
 800072e:	f040 8092 	bne.w	8000856 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000746:	4b4d      	ldr	r3, [pc, #308]	; (800087c <HAL_ADC_Start_DMA+0x1a0>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	2b00      	cmp	r3, #0
 8000750:	d004      	beq.n	800075c <HAL_ADC_Start_DMA+0x80>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800075a:	d115      	bne.n	8000788 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000760:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d027      	beq.n	80007c6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800077e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	645a      	str	r2, [r3, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000786:	e01e      	b.n	80007c6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800079c:	d004      	beq.n	80007a8 <HAL_ADC_Start_DMA+0xcc>
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <HAL_ADC_Start_DMA+0x1a4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d10e      	bne.n	80007c6 <HAL_ADC_Start_DMA+0xea>
 80007a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d007      	beq.n	80007c6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	645a      	str	r2, [r3, #68]	; 0x44
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007d2:	d106      	bne.n	80007e2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d8:	f023 0206 	bic.w	r2, r3, #6
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	649a      	str	r2, [r3, #72]	; 0x48
 80007e0:	e002      	b.n	80007e8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2200      	movs	r2, #0
 80007e6:	649a      	str	r2, [r3, #72]	; 0x48
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f4:	4a23      	ldr	r2, [pc, #140]	; (8000884 <HAL_ADC_Start_DMA+0x1a8>)
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <HAL_ADC_Start_DMA+0x1ac>)
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_ADC_Start_DMA+0x1b0>)
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	221c      	movs	r2, #28
 800080e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 0210 	orr.w	r2, r2, #16
 800081e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68da      	ldr	r2, [r3, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3340      	adds	r3, #64	; 0x40
 800083a:	4619      	mov	r1, r3
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f000 fdca 	bl	80013d8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0204 	orr.w	r2, r2, #4
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	e00d      	b.n	8000872 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800085e:	e008      	b.n	8000872 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800086c:	e001      	b.n	8000872 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800086e:	2302      	movs	r3, #2
 8000870:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000872:	7dfb      	ldrb	r3, [r7, #23]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	50000300 	.word	0x50000300
 8000880:	50000100 	.word	0x50000100
 8000884:	08000ee9 	.word	0x08000ee9
 8000888:	08000f63 	.word	0x08000f63
 800088c:	08000f7f 	.word	0x08000f7f

08000890 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d101      	bne.n	80008ac <HAL_ADCEx_Calibration_Start+0x1c>
 80008a8:	2302      	movs	r3, #2
 80008aa:	e057      	b.n	800095c <HAL_ADCEx_Calibration_Start+0xcc>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2201      	movs	r2, #1
 80008b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 fbdb 	bl	8001070 <ADC_Disable>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d146      	bne.n	8000952 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80008d8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d107      	bne.n	80008f0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008ee:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80008fe:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000900:	f7ff fd10 	bl	8000324 <HAL_GetTick>
 8000904:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000906:	e014      	b.n	8000932 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000908:	f7ff fd0c 	bl	8000324 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	2b0a      	cmp	r3, #10
 8000914:	d90d      	bls.n	8000932 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f023 0312 	bic.w	r3, r3, #18
 800091e:	f043 0210 	orr.w	r2, r3, #16
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e014      	b.n	800095c <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800093c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000940:	d0e2      	beq.n	8000908 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f023 0303 	bic.w	r3, r3, #3
 800094a:	f043 0201 	orr.w	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000964:	b480      	push	{r7}
 8000966:	b09d      	sub	sp, #116	; 0x74
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800097e:	2b01      	cmp	r3, #1
 8000980:	d101      	bne.n	8000986 <HAL_ADC_ConfigChannel+0x22>
 8000982:	2302      	movs	r3, #2
 8000984:	e2a5      	b.n	8000ed2 <HAL_ADC_ConfigChannel+0x56e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	2b00      	cmp	r3, #0
 800099a:	f040 8289 	bne.w	8000eb0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d81c      	bhi.n	80009e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	461a      	mov	r2, r3
 80009ba:	231f      	movs	r3, #31
 80009bc:	4093      	lsls	r3, r2
 80009be:	43db      	mvns	r3, r3
 80009c0:	4019      	ands	r1, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa00 f203 	lsl.w	r2, r0, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	631a      	str	r2, [r3, #48]	; 0x30
 80009de:	e063      	b.n	8000aa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b09      	cmp	r3, #9
 80009e6:	d81e      	bhi.n	8000a26 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	3b1e      	subs	r3, #30
 80009fc:	221f      	movs	r2, #31
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4019      	ands	r1, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	3b1e      	subs	r3, #30
 8000a18:	fa00 f203 	lsl.w	r2, r0, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
 8000a24:	e040      	b.n	8000aa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2b0e      	cmp	r3, #14
 8000a2c:	d81e      	bhi.n	8000a6c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	3b3c      	subs	r3, #60	; 0x3c
 8000a42:	221f      	movs	r2, #31
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4019      	ands	r1, r3
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	3b3c      	subs	r3, #60	; 0x3c
 8000a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
 8000a6a:	e01d      	b.n	8000aa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	3b5a      	subs	r3, #90	; 0x5a
 8000a80:	221f      	movs	r2, #31
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4019      	ands	r1, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	3b5a      	subs	r3, #90	; 0x5a
 8000a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 80e5 	bne.w	8000c82 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b09      	cmp	r3, #9
 8000abe:	d91c      	bls.n	8000afa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6999      	ldr	r1, [r3, #24]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b1e      	subs	r3, #30
 8000ad2:	2207      	movs	r2, #7
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4019      	ands	r1, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	6898      	ldr	r0, [r3, #8]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	3b1e      	subs	r3, #30
 8000aec:	fa00 f203 	lsl.w	r2, r0, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	619a      	str	r2, [r3, #24]
 8000af8:	e019      	b.n	8000b2e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6959      	ldr	r1, [r3, #20]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4019      	ands	r1, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	6898      	ldr	r0, [r3, #8]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	fa00 f203 	lsl.w	r2, r0, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d84f      	bhi.n	8000bf0 <HAL_ADC_ConfigChannel+0x28c>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <HAL_ADC_ConfigChannel+0x1f4>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b69 	.word	0x08000b69
 8000b5c:	08000b8b 	.word	0x08000b8b
 8000b60:	08000bad 	.word	0x08000bad
 8000b64:	08000bcf 	.word	0x08000bcf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b6e:	4b9e      	ldr	r3, [pc, #632]	; (8000de8 <HAL_ADC_ConfigChannel+0x484>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	0691      	lsls	r1, r2, #26
 8000b78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b86:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000b88:	e07e      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b90:	4b95      	ldr	r3, [pc, #596]	; (8000de8 <HAL_ADC_ConfigChannel+0x484>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	0691      	lsls	r1, r2, #26
 8000b9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ba8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000baa:	e06d      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000bb2:	4b8d      	ldr	r3, [pc, #564]	; (8000de8 <HAL_ADC_ConfigChannel+0x484>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	0691      	lsls	r1, r2, #26
 8000bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000bca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000bcc:	e05c      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000bd4:	4b84      	ldr	r3, [pc, #528]	; (8000de8 <HAL_ADC_ConfigChannel+0x484>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	0691      	lsls	r1, r2, #26
 8000bde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000be0:	430a      	orrs	r2, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000bec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000bee:	e04b      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	069b      	lsls	r3, r3, #26
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d107      	bne.n	8000c14 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c12:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	069b      	lsls	r3, r3, #26
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d107      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c36:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	069b      	lsls	r3, r3, #26
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d107      	bne.n	8000c5c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c5a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	069b      	lsls	r3, r3, #26
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d10a      	bne.n	8000c86 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000c7e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000c80:	e001      	b.n	8000c86 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000c82:	bf00      	nop
 8000c84:	e000      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000c86:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d108      	bne.n	8000ca8 <HAL_ADC_ConfigChannel+0x344>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ADC_ConfigChannel+0x344>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_ConfigChannel+0x346>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 810b 	bne.w	8000ec6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d00f      	beq.n	8000cd8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000cd6:	e049      	b.n	8000d6c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d91c      	bls.n	8000d34 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6999      	ldr	r1, [r3, #24]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	3b1b      	subs	r3, #27
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	4019      	ands	r1, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	6898      	ldr	r0, [r3, #8]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	3b1b      	subs	r3, #27
 8000d26:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	e01b      	b.n	8000d6c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6959      	ldr	r1, [r3, #20]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	2207      	movs	r2, #7
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4019      	ands	r1, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	6898      	ldr	r0, [r3, #8]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	fa00 f203 	lsl.w	r2, r0, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_ADC_ConfigChannel+0x488>)
 8000d6e:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b10      	cmp	r3, #16
 8000d76:	d105      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d88:	2b11      	cmp	r3, #17
 8000d8a:	d105      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d9c:	2b12      	cmp	r3, #18
 8000d9e:	f040 8092 	bne.w	8000ec6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 808b 	bne.w	8000ec6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db8:	d102      	bne.n	8000dc0 <HAL_ADC_ConfigChannel+0x45c>
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_ADC_ConfigChannel+0x48c>)
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e002      	b.n	8000dc6 <HAL_ADC_ConfigChannel+0x462>
 8000dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dc4:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10f      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x490>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x490>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e007      	b.n	8000df6 <HAL_ADC_ConfigChannel+0x492>
 8000de6:	bf00      	nop
 8000de8:	83fff000 	.word	0x83fff000
 8000dec:	50000300 	.word	0x50000300
 8000df0:	50000100 	.word	0x50000100
 8000df4:	2300      	movs	r3, #0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d150      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dfa:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d010      	beq.n	8000e22 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d107      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x4b8>
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x4b8>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x4ba>
 8000e1c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d13c      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d11d      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x502>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e32:	d118      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_ADC_ConfigChannel+0x57c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <HAL_ADC_ConfigChannel+0x580>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9a      	lsrs	r2, r3, #18
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e56:	e002      	b.n	8000e5e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f9      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e64:	e02e      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b11      	cmp	r3, #17
 8000e6c:	d10b      	bne.n	8000e86 <HAL_ADC_ConfigChannel+0x522>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e76:	d106      	bne.n	8000e86 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e82:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e84:	e01e      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d11a      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e98:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000e9a:	e013      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f043 0220 	orr.w	r2, r3, #32
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000eae:	e00a      	b.n	8000ec6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	f043 0220 	orr.w	r2, r3, #32
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000ec2:	e000      	b.n	8000ec6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ec4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3774      	adds	r7, #116	; 0x74
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	431bde83 	.word	0x431bde83

08000ee8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d126      	bne.n	8000f50 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d115      	bne.n	8000f48 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	69db      	ldr	r3, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff fa19 	bl	8000380 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f4e:	e004      	b.n	8000f5a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	4798      	blx	r3
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fa0f 	bl	8000394 <HAL_ADC_ConvHalfCpltCallback>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f9c:	f043 0204 	orr.w	r2, r3, #4
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff f9ff 	bl	80003a8 <HAL_ADC_ErrorCallback>
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <ADC_Enable+0x2c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <ADC_Enable+0x2c>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <ADC_Enable+0x2e>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d13c      	bne.n	8001060 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <ADC_Enable+0xb8>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00d      	beq.n	8001010 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	f043 0210 	orr.w	r2, r3, #16
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e028      	b.n	8001062 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001020:	f7ff f980 	bl	8000324 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001026:	e014      	b.n	8001052 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001028:	f7ff f97c 	bl	8000324 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d90d      	bls.n	8001052 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f043 0210 	orr.w	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e007      	b.n	8001062 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1e3      	bne.n	8001028 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	8000003f 	.word	0x8000003f

08001070 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d108      	bne.n	800109c <ADC_Disable+0x2c>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <ADC_Disable+0x2c>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <ADC_Disable+0x2e>
 800109c:	2300      	movs	r3, #0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d040      	beq.n	8001124 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 030d 	and.w	r3, r3, #13
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10f      	bne.n	80010d0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0202 	orr.w	r2, r2, #2
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2203      	movs	r2, #3
 80010c6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80010c8:	f7ff f92c 	bl	8000324 <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80010ce:	e022      	b.n	8001116 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d4:	f043 0210 	orr.w	r2, r3, #16
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	f043 0201 	orr.w	r2, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01c      	b.n	8001126 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ec:	f7ff f91a 	bl	8000324 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d90d      	bls.n	8001116 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	d0e3      	beq.n	80010ec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <NVIC_EnableIRQ+0x30>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da0b      	bge.n	80011f4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <NVIC_SetPriority+0x4c>)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	3b04      	subs	r3, #4
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f2:	e009      	b.n	8001208 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <NVIC_SetPriority+0x50>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	e000e100 	.word	0xe000e100

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff2d 	bl	8001130 <NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff42 	bl	8001178 <NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff35 	bl	8001194 <NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e037      	b.n	80013d0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001376:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800137a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f940 	bl	8001638 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}  
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_DMA_Start_IT+0x20>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e04a      	b.n	800148e <HAL_DMA_Start_IT+0xb6>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001406:	2b01      	cmp	r3, #1
 8001408:	d13a      	bne.n	8001480 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2202      	movs	r2, #2
 800140e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 f8d4 	bl	80015dc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 020e 	orr.w	r2, r2, #14
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e00f      	b.n	800146e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 020a 	orr.w	r2, r2, #10
 800145c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0204 	bic.w	r2, r2, #4
 800146c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e005      	b.n	800148c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001488:	2302      	movs	r3, #2
 800148a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800148c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2204      	movs	r2, #4
 80014b4:	409a      	lsls	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d024      	beq.n	8001508 <HAL_DMA_IRQHandler+0x72>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01f      	beq.n	8001508 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0204 	bic.w	r2, r2, #4
 80014e4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	2104      	movs	r1, #4
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001506:	e065      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	2202      	movs	r2, #2
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d02c      	beq.n	8001572 <HAL_DMA_IRQHandler+0xdc>
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d027      	beq.n	8001572 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10b      	bne.n	8001548 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020a 	bic.w	r2, r2, #10
 800153e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001550:	2102      	movs	r1, #2
 8001552:	fa01 f202 	lsl.w	r2, r1, r2
 8001556:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d035      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001570:	e030      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	2208      	movs	r2, #8
 8001578:	409a      	lsls	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d028      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020e 	bic.w	r2, r2, #14
 800159a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
    }
  }
}  
 80015d2:	e7ff      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13e>
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d108      	bne.n	800161c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800161a:	e007      	b.n	800162c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	60da      	str	r2, [r3, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <DMA_CalcBaseAndBitshift+0x34>)
 8001648:	4413      	add	r3, r2
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <DMA_CalcBaseAndBitshift+0x38>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	009a      	lsls	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <DMA_CalcBaseAndBitshift+0x3c>)
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	bffdfff8 	.word	0xbffdfff8
 8001670:	cccccccd 	.word	0xcccccccd
 8001674:	40020000 	.word	0x40020000

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800168e:	e14e      	b.n	800192e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8140 	beq.w	8001928 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x40>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b12      	cmp	r3, #18
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d00b      	beq.n	8001754 <HAL_GPIO_Init+0xdc>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001748:	2b11      	cmp	r3, #17
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b12      	cmp	r3, #18
 8001752:	d130      	bne.n	80017b6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178a:	2201      	movs	r2, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 0201 	and.w	r2, r3, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 809a 	beq.w	8001928 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	4b55      	ldr	r3, [pc, #340]	; (800194c <HAL_GPIO_Init+0x2d4>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x2d4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_GPIO_Init+0x2d4>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800180c:	4a50      	ldr	r2, [pc, #320]	; (8001950 <HAL_GPIO_Init+0x2d8>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a46      	ldr	r2, [pc, #280]	; (8001954 <HAL_GPIO_Init+0x2dc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a45      	ldr	r2, [pc, #276]	; (8001958 <HAL_GPIO_Init+0x2e0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a44      	ldr	r2, [pc, #272]	; (800195c <HAL_GPIO_Init+0x2e4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1dc>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ea>
 8001854:	2305      	movs	r3, #5
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ea>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ea>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ea>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x2d8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018a4:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ce:	4a24      	ldr	r2, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_GPIO_Init+0x2e8>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aea9 	bne.w	8001690 <HAL_GPIO_Init+0x18>
  }
}
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001980:	e002      	b.n	8001988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800199a:	af00      	add	r7, sp, #0
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f000 beda 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 816e 	beq.w	8001c9a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019be:	4bb5      	ldr	r3, [pc, #724]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d00c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ca:	4bb2      	ldr	r3, [pc, #712]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d15a      	bne.n	8001a8c <HAL_RCC_OscConfig+0xf8>
 80019d6:	4baf      	ldr	r3, [pc, #700]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d153      	bne.n	8001a8c <HAL_RCC_OscConfig+0xf8>
 80019e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80019f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0x82>
 8001a10:	4ba0      	ldr	r3, [pc, #640]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0xae>
 8001a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a3e:	4b95      	ldr	r3, [pc, #596]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001a4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001a4e:	fa92 f2a2 	rbit	r2, r2
 8001a52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001a56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b252      	sxtb	r2, r2
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	b252      	sxtb	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f002 021f 	and.w	r2, r2, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 810f 	beq.w	8001c98 <HAL_RCC_OscConfig+0x304>
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f040 8109 	bne.w	8001c98 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f000 be6b 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x112>
 8001a98:	4b7e      	ldr	r3, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a7d      	ldr	r2, [pc, #500]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e030      	b.n	8001b08 <HAL_RCC_OscConfig+0x174>
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x136>
 8001ab0:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a74      	ldr	r2, [pc, #464]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e01e      	b.n	8001b08 <HAL_RCC_OscConfig+0x174>
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x15c>
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b6c      	ldr	r3, [pc, #432]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6b      	ldr	r2, [pc, #428]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x174>
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a67      	ldr	r2, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a64      	ldr	r2, [pc, #400]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b08:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f023 020f 	bic.w	r2, r3, #15
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	495f      	ldr	r1, [pc, #380]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d05a      	beq.n	8001bdc <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7fe fbfd 	bl	8000324 <HAL_GetTick>
 8001b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b30:	f7fe fbf8 	bl	8000324 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	; 0x64
 8001b3e:	d902      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f000 be0e 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001b5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e4>
 8001b72:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	e015      	b.n	8001ba4 <HAL_RCC_OscConfig+0x210>
 8001b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b7c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b94:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ba0:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001bac:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001bb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b252      	sxtb	r2, r2
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	b252      	sxtb	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f002 021f 	and.w	r2, r2, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0aa      	beq.n	8001b30 <HAL_RCC_OscConfig+0x19c>
 8001bda:	e05e      	b.n	8001c9a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fba2 	bl	8000324 <HAL_GetTick>
 8001be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be6:	f7fe fb9d 	bl	8000324 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d902      	bls.n	8001bfc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f000 bdb3 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>
 8001bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001c10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x29a>
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x2c6>
 8001c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_RCC_OscConfig+0x300>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001c62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001c66:	fa92 f2a2 	rbit	r2, r2
 8001c6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001c6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c72:	fab2 f282 	clz	r2, r2
 8001c76:	b252      	sxtb	r2, r2
 8001c78:	f042 0220 	orr.w	r2, r2, #32
 8001c7c:	b252      	sxtb	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1aa      	bne.n	8001be6 <HAL_RCC_OscConfig+0x252>
 8001c90:	e003      	b.n	8001c9a <HAL_RCC_OscConfig+0x306>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8170 	beq.w	8001f8a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001caa:	4bd0      	ldr	r3, [pc, #832]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cb6:	4bcd      	ldr	r3, [pc, #820]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d16d      	bne.n	8001d9e <HAL_RCC_OscConfig+0x40a>
 8001cc2:	4bca      	ldr	r3, [pc, #808]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d167      	bne.n	8001d9e <HAL_RCC_OscConfig+0x40a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001ce0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x36a>
 8001cf8:	4bbc      	ldr	r3, [pc, #752]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	e013      	b.n	8001d26 <HAL_RCC_OscConfig+0x392>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d16:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d22:	4bb2      	ldr	r3, [pc, #712]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2202      	movs	r2, #2
 8001d28:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001d2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001d38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b252      	sxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b252      	sxtb	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f002 021f 	and.w	r2, r2, #31
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f202 	lsl.w	r2, r1, r2
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3d6>
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d002      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f000 bcfc 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4ba0      	ldr	r3, [pc, #640]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6959      	ldr	r1, [r3, #20]
 8001d78:	23f8      	movs	r3, #248	; 0xf8
 8001d7a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001d8a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	4995      	ldr	r1, [pc, #596]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9c:	e0f5      	b.n	8001f8a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8085 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x520>
 8001daa:	2301      	movs	r3, #1
 8001dac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001dbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe faa6 	bl	8000324 <HAL_GetTick>
 8001dd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7fe faa1 	bl	8000324 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d902      	bls.n	8001df4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	f000 bcb7 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001e06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0x490>
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0x4b8>
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001e52:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001e5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b252      	sxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b252      	sxtb	r2, r2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ae      	beq.n	8001dde <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6959      	ldr	r1, [r3, #20]
 8001e8e:	23f8      	movs	r3, #248	; 0xf8
 8001e90:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001ea0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	494f      	ldr	r1, [pc, #316]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
 8001eb2:	e06a      	b.n	8001f8a <HAL_RCC_OscConfig+0x5f6>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001ec6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2300      	movs	r3, #0
 8001edc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe fa21 	bl	8000324 <HAL_GetTick>
 8001ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7fe fa1c 	bl	8000324 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d902      	bls.n	8001efe <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	f000 bc32 	b.w	8002762 <HAL_RCC_OscConfig+0xdce>
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001f10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d102      	bne.n	8001f2e <HAL_RCC_OscConfig+0x59a>
 8001f28:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e013      	b.n	8001f56 <HAL_RCC_OscConfig+0x5c2>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x658>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	2202      	movs	r2, #2
 8001f58:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001f5c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001f68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b252      	sxtb	r2, r2
 8001f72:	f042 0220 	orr.w	r2, r2, #32
 8001f76:	b252      	sxtb	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ae      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80d8 	beq.w	800214a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d067      	beq.n	8002074 <HAL_RCC_OscConfig+0x6e0>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001fb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x65c>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2301      	movs	r3, #1
 8001fca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe f9aa 	bl	8000324 <HAL_GetTick>
 8001fd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd4:	e00e      	b.n	8001ff4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7fe f9a5 	bl	8000324 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d906      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e3bb      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	10908120 	.word	0x10908120
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002006:	2302      	movs	r3, #2
 8002008:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800200c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002030:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4ba5      	ldr	r3, [pc, #660]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002036:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800203a:	2102      	movs	r1, #2
 800203c:	6019      	str	r1, [r3, #0]
 800203e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f1a3 	rbit	r1, r3
 8002048:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800204c:	6019      	str	r1, [r3, #0]
  return(result);
 800204e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800205e:	b25b      	sxtb	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0b1      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x642>
 8002072:	e06a      	b.n	800214a <HAL_RCC_OscConfig+0x7b6>
 8002074:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800208a:	601a      	str	r2, [r3, #0]
  return(result);
 800208c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002090:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <HAL_RCC_OscConfig+0x938>)
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	461a      	mov	r2, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7fe f93e 	bl	8000324 <HAL_GetTick>
 80020a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7fe f939 	bl	8000324 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e34f      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 80020c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020c6:	2202      	movs	r2, #2
 80020c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	fa93 f2a3 	rbit	r2, r3
 80020d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002108:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210a:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 800210c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002112:	2102      	movs	r1, #2
 8002114:	6019      	str	r1, [r3, #0]
 8002116:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f1a3 	rbit	r1, r3
 8002120:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002124:	6019      	str	r1, [r3, #0]
  return(result);
 8002126:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b25b      	sxtb	r3, r3
 8002132:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002136:	b25b      	sxtb	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1b1      	bne.n	80020ae <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8159 	beq.w	800240c <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4a55      	ldr	r2, [pc, #340]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002176:	61d3      	str	r3, [r2, #28]
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800218c:	2301      	movs	r3, #1
 800218e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x93c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x93c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_RCC_OscConfig+0x93c>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7fe f8bb 	bl	8000324 <HAL_GetTick>
 80021ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe f8b6 	bl	8000324 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e2cc      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_OscConfig+0x93c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x858>
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a39      	ldr	r2, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e02f      	b.n	800224c <HAL_RCC_OscConfig+0x8b8>
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x87c>
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a33      	ldr	r2, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0x8b8>
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b05      	cmp	r3, #5
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x8a0>
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0x8b8>
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 8002246:	f023 0304 	bic.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06b      	beq.n	800232e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe f865 	bl	8000324 <HAL_GetTick>
 800225a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe f860 	bl	8000324 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e274      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 8002278:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022a6:	601a      	str	r2, [r3, #0]
  return(result);
 80022a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d108      	bne.n	80022d4 <HAL_RCC_OscConfig+0x940>
 80022c2:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <HAL_RCC_OscConfig+0x934>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	e013      	b.n	80022f0 <HAL_RCC_OscConfig+0x95c>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	10908120 	.word	0x10908120
 80022d0:	40007000 	.word	0x40007000
 80022d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	4bbb      	ldr	r3, [pc, #748]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022f4:	2102      	movs	r1, #2
 80022f6:	6011      	str	r1, [r2, #0]
 80022f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	fa92 f1a2 	rbit	r1, r2
 8002302:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002306:	6011      	str	r1, [r2, #0]
  return(result);
 8002308:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	fab2 f282 	clz	r2, r2
 8002312:	b252      	sxtb	r2, r2
 8002314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002318:	b252      	sxtb	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d099      	beq.n	8002260 <HAL_RCC_OscConfig+0x8cc>
 800232c:	e064      	b.n	80023f8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fd fff9 	bl	8000324 <HAL_GetTick>
 8002332:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7fd fff4 	bl	8000324 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e208      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 8002350:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002354:	2202      	movs	r2, #2
 8002356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800237e:	601a      	str	r2, [r3, #0]
  return(result);
 8002380:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002384:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0xa0c>
 800239a:	4b90      	ldr	r3, [pc, #576]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	e00d      	b.n	80023bc <HAL_RCC_OscConfig+0xa28>
 80023a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023a4:	2202      	movs	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80023c0:	2102      	movs	r1, #2
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	fa92 f1a2 	rbit	r1, r2
 80023ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023d2:	6011      	str	r1, [r2, #0]
  return(result);
 80023d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b252      	sxtb	r2, r2
 80023e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e4:	b252      	sxtb	r2, r2
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d19f      	bne.n	8002338 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 81a4 	beq.w	8002760 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	f000 819b 	beq.w	800275c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f040 8113 	bne.w	8002658 <HAL_RCC_OscConfig+0xcc4>
 8002432:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800244a:	601a      	str	r2, [r3, #0]
  return(result);
 800244c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002450:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800245a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	461a      	mov	r2, r3
 8002462:	2300      	movs	r3, #0
 8002464:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fd ff5d 	bl	8000324 <HAL_GetTick>
 800246a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	e009      	b.n	8002484 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7fd ff58 	bl	8000324 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e16e      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 8002484:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800249c:	601a      	str	r2, [r3, #0]
  return(result);
 800249e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_RCC_OscConfig+0xb2a>
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0xb62>
 80024be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024fe:	6011      	str	r1, [r2, #0]
 8002500:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	fa92 f1a2 	rbit	r1, r2
 800250a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800250e:	6011      	str	r1, [r2, #0]
  return(result);
 8002510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	fab2 f282 	clz	r2, r2
 800251a:	b252      	sxtb	r2, r2
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	b252      	sxtb	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d19d      	bne.n	8002470 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	430b      	orrs	r3, r1
 800254a:	4924      	ldr	r1, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
 8002550:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002568:	601a      	str	r2, [r3, #0]
  return(result);
 800256a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800256e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	461a      	mov	r2, r3
 8002580:	2301      	movs	r3, #1
 8002582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fd fece 	bl	8000324 <HAL_GetTick>
 8002588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800258c:	e009      	b.n	80025a2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258e:	f7fd fec9 	bl	8000324 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0df      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 80025a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025ba:	601a      	str	r2, [r3, #0]
  return(result);
 80025bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d104      	bne.n	80025e0 <HAL_RCC_OscConfig+0xc4c>
 80025d6:	4b01      	ldr	r3, [pc, #4]	; (80025dc <HAL_RCC_OscConfig+0xc48>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xc84>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_RCC_OscConfig+0xdd8>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800261c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002620:	6011      	str	r1, [r2, #0]
 8002622:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	fa92 f1a2 	rbit	r1, r2
 800262c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002630:	6011      	str	r1, [r2, #0]
  return(result);
 8002632:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	fab2 f282 	clz	r2, r2
 800263c:	b252      	sxtb	r2, r2
 800263e:	f042 0220 	orr.w	r2, r2, #32
 8002642:	b252      	sxtb	r2, r2
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f002 021f 	and.w	r2, r2, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d09b      	beq.n	800258e <HAL_RCC_OscConfig+0xbfa>
 8002656:	e083      	b.n	8002760 <HAL_RCC_OscConfig+0xdcc>
 8002658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800265c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002670:	601a      	str	r2, [r3, #0]
  return(result);
 8002672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002676:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002680:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	2300      	movs	r3, #0
 800268a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fd fe4a 	bl	8000324 <HAL_GetTick>
 8002690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	e009      	b.n	80026aa <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fd fe45 	bl	8000324 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e05b      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
 80026aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c2:	601a      	str	r2, [r3, #0]
  return(result);
 80026c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_OscConfig+0xd50>
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_RCC_OscConfig+0xdd8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	e01b      	b.n	800271c <HAL_RCC_OscConfig+0xd88>
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f107 0320 	add.w	r3, r7, #32
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_RCC_OscConfig+0xdd8>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	f107 0214 	add.w	r2, r7, #20
 8002720:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	f107 0214 	add.w	r2, r7, #20
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	fa92 f1a2 	rbit	r1, r2
 8002730:	f107 0210 	add.w	r2, r7, #16
 8002734:	6011      	str	r1, [r2, #0]
  return(result);
 8002736:	f107 0210 	add.w	r2, r7, #16
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	fab2 f282 	clz	r2, r2
 8002740:	b252      	sxtb	r2, r2
 8002742:	f042 0220 	orr.w	r2, r2, #32
 8002746:	b252      	sxtb	r2, r2
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d19d      	bne.n	8002696 <HAL_RCC_OscConfig+0xd02>
 800275a:	e001      	b.n	8002760 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b09e      	sub	sp, #120	; 0x78
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e164      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d910      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b8f      	ldr	r3, [pc, #572]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	498d      	ldr	r1, [pc, #564]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e14c      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b84      	ldr	r3, [pc, #528]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4981      	ldr	r1, [pc, #516]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80df 	beq.w	80029a2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d13d      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
 80027ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80027fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d102      	bne.n	8002816 <HAL_RCC_ClockConfig+0xa6>
 8002810:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	e00f      	b.n	8002836 <HAL_RCC_ClockConfig+0xc6>
 8002816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	667b      	str	r3, [r7, #100]	; 0x64
 8002824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002828:	663b      	str	r3, [r7, #96]	; 0x60
 800282a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002832:	4b69      	ldr	r3, [pc, #420]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800283a:	65ba      	str	r2, [r7, #88]	; 0x58
 800283c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002846:	fab2 f282 	clz	r2, r2
 800284a:	b252      	sxtb	r2, r2
 800284c:	f042 0220 	orr.w	r2, r2, #32
 8002850:	b252      	sxtb	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d17d      	bne.n	8002960 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0f4      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d13d      	bne.n	80028ec <HAL_RCC_ClockConfig+0x17c>
 8002870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002874:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_RCC_ClockConfig+0x12a>
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e00f      	b.n	80028ba <HAL_RCC_ClockConfig+0x14a>
 800289a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
 80028a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
 80028ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028be:	63ba      	str	r2, [r7, #56]	; 0x38
 80028c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80028c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b252      	sxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b252      	sxtb	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d13b      	bne.n	8002960 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0b2      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
 80028ec:	2302      	movs	r3, #2
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_RCC_ClockConfig+0x1a4>
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	e00d      	b.n	8002930 <HAL_RCC_ClockConfig+0x1c0>
 8002914:	2302      	movs	r3, #2
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	2302      	movs	r3, #2
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	2202      	movs	r2, #2
 8002932:	61ba      	str	r2, [r7, #24]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	fa92 f2a2 	rbit	r2, r2
 800293a:	617a      	str	r2, [r7, #20]
  return(result);
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b252      	sxtb	r2, r2
 8002944:	f042 0220 	orr.w	r2, r2, #32
 8002948:	b252      	sxtb	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f002 021f 	and.w	r2, r2, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e078      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 0203 	bic.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	491a      	ldr	r1, [pc, #104]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002972:	f7fd fcd7 	bl	8000324 <HAL_GetTick>
 8002976:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002978:	e00a      	b.n	8002990 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297a:	f7fd fcd3 	bl	8000324 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e060      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_ClockConfig+0x268>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 020c 	and.w	r2, r3, #12
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	429a      	cmp	r2, r3
 80029a0:	d1eb      	bne.n	800297a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d215      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 0207 	bic.w	r2, r3, #7
 80029b8:	4906      	ldr	r1, [pc, #24]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_RCC_ClockConfig+0x264>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d006      	beq.n	80029dc <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_RCC_ClockConfig+0x2e2>
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_RCC_ClockConfig+0x2ec>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4919      	ldr	r1, [pc, #100]	; (8002a5c <HAL_RCC_ClockConfig+0x2ec>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_ClockConfig+0x2ec>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4911      	ldr	r1, [pc, #68]	; (8002a5c <HAL_RCC_ClockConfig+0x2ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a1a:	f000 f825 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCC_ClockConfig+0x2ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a28:	23f0      	movs	r3, #240	; 0xf0
 8002a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_RCC_ClockConfig+0x2f0>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	fa21 f303 	lsr.w	r3, r1, r3
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <HAL_RCC_ClockConfig+0x2f4>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fd fc26 	bl	800029c <HAL_InitTick>
  
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3778      	adds	r7, #120	; 0x78
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08004250 	.word	0x08004250
 8002a64:	20000008 	.word	0x20000008

08002a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b08b      	sub	sp, #44	; 0x2c
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x30>
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x36>
 8002a96:	e03c      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a98:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a9a:	623b      	str	r3, [r7, #32]
      break;
 8002a9c:	e03c      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aa4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002aa8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	607b      	str	r3, [r7, #4]
  return(result);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	230f      	movs	r3, #15
 8002acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	e004      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	623b      	str	r3, [r7, #32]
      break;
 8002b10:	e002      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b14:	623b      	str	r3, [r7, #32]
      break;
 8002b16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b18:	6a3b      	ldr	r3, [r7, #32]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	372c      	adds	r7, #44	; 0x2c
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	007a1200 	.word	0x007a1200
 8002b30:	08004230 	.word	0x08004230
 8002b34:	08004240 	.word	0x08004240
 8002b38:	003d0900 	.word	0x003d0900

08002b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000008 	.word	0x20000008

08002b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b5a:	f7ff ffef 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002b5e:	4601      	mov	r1, r0
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b68:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002b6c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	603b      	str	r3, [r7, #0]
  return(result);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b82:	5cd3      	ldrb	r3, [r2, r3]
 8002b84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08004260 	.word	0x08004260

08002b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b9e:	f7ff ffcd 	bl	8002b3c <HAL_RCC_GetHCLKFreq>
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002bac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bb0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	603b      	str	r3, [r7, #0]
  return(result);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08004260 	.word	0x08004260

08002bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e043      	b.n	8002c76 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fdae 	bl	8003764 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8b9 	bl	8002d98 <UART_SetConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e022      	b.n	8002c76 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fa13 	bl	8003064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c5c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa9a 	bl	80031a8 <UART_CheckIdleState>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b088      	sub	sp, #32
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d177      	bne.n	8002d8e <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_Transmit+0x2c>
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e070      	b.n	8002d90 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Transmit+0x3e>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e069      	b.n	8002d90 <HAL_UART_Transmit+0x112>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002cd2:	f7fd fb27 	bl	8000324 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002ce8:	e034      	b.n	8002d54 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa97 	bl	800323a <UART_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e03c      	b.n	8002d90 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	d111      	bne.n	8002d44 <HAL_UART_Transmit+0xc6>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3302      	adds	r3, #2
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	e007      	b.n	8002d54 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	60ba      	str	r2, [r7, #8]
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b292      	uxth	r2, r2
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1c4      	bne.n	8002cea <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fa65 	bl	800323a <UART_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e00a      	b.n	8002d90 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002da4:	2310      	movs	r3, #16
 8002da6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b9f      	ldr	r3, [pc, #636]	; (8003050 <UART_SetConfig+0x2b8>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a8e      	ldr	r2, [pc, #568]	; (8003054 <UART_SetConfig+0x2bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d121      	bne.n	8002e64 <UART_SetConfig+0xcc>
 8002e20:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <UART_SetConfig+0x2c0>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d817      	bhi.n	8002e5c <UART_SetConfig+0xc4>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <UART_SetConfig+0x9c>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e51 	.word	0x08002e51
 8002e3c:	08002e57 	.word	0x08002e57
 8002e40:	08002e4b 	.word	0x08002e4b
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]
 8002e48:	e01e      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	75fb      	strb	r3, [r7, #23]
 8002e4e:	e01b      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e50:	2304      	movs	r3, #4
 8002e52:	75fb      	strb	r3, [r7, #23]
 8002e54:	e018      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e56:	2308      	movs	r3, #8
 8002e58:	75fb      	strb	r3, [r7, #23]
 8002e5a:	e015      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	75fb      	strb	r3, [r7, #23]
 8002e60:	bf00      	nop
 8002e62:	e011      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7c      	ldr	r2, [pc, #496]	; (800305c <UART_SetConfig+0x2c4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d102      	bne.n	8002e74 <UART_SetConfig+0xdc>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
 8002e72:	e009      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a79      	ldr	r2, [pc, #484]	; (8003060 <UART_SetConfig+0x2c8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d102      	bne.n	8002e84 <UART_SetConfig+0xec>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
 8002e82:	e001      	b.n	8002e88 <UART_SetConfig+0xf0>
 8002e84:	2310      	movs	r3, #16
 8002e86:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e90:	d16f      	bne.n	8002f72 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d857      	bhi.n	8002f48 <UART_SetConfig+0x1b0>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0x108>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002ee1 	.word	0x08002ee1
 8002ea8:	08002efd 	.word	0x08002efd
 8002eac:	08002f49 	.word	0x08002f49
 8002eb0:	08002f17 	.word	0x08002f17
 8002eb4:	08002f49 	.word	0x08002f49
 8002eb8:	08002f49 	.word	0x08002f49
 8002ebc:	08002f49 	.word	0x08002f49
 8002ec0:	08002f33 	.word	0x08002f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ec4:	f7ff fe46 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	005a      	lsls	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	82bb      	strh	r3, [r7, #20]
        break;
 8002ede:	e036      	b.n	8002f4e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ee0:	f7ff fe5a 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	005a      	lsls	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	82bb      	strh	r3, [r7, #20]
        break;
 8002efa:	e028      	b.n	8002f4e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002f06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6852      	ldr	r2, [r2, #4]
 8002f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f12:	82bb      	strh	r3, [r7, #20]
        break;
 8002f14:	e01b      	b.n	8002f4e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f16:	f7ff fda7 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	005a      	lsls	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	82bb      	strh	r3, [r7, #20]
        break;
 8002f30:	e00d      	b.n	8002f4e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	82bb      	strh	r3, [r7, #20]
        break;
 8002f46:	e002      	b.n	8002f4e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f4c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002f4e:	8abb      	ldrh	r3, [r7, #20]
 8002f50:	f023 030f 	bic.w	r3, r3, #15
 8002f54:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f56:	8abb      	ldrh	r3, [r7, #20]
 8002f58:	105b      	asrs	r3, r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	897a      	ldrh	r2, [r7, #10]
 8002f6e:	60da      	str	r2, [r3, #12]
 8002f70:	e069      	b.n	8003046 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d863      	bhi.n	8003040 <UART_SetConfig+0x2a8>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <UART_SetConfig+0x1e8>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fe5 	.word	0x08002fe5
 8002f8c:	08003041 	.word	0x08003041
 8002f90:	08003005 	.word	0x08003005
 8002f94:	08003041 	.word	0x08003041
 8002f98:	08003041 	.word	0x08003041
 8002f9c:	08003041 	.word	0x08003041
 8002fa0:	08003025 	.word	0x08003025
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fa4:	f7ff fdd6 	bl	8002b54 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60da      	str	r2, [r3, #12]
        break;
 8002fc2:	e040      	b.n	8003046 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fc4:	f7ff fde8 	bl	8002b98 <HAL_RCC_GetPCLK2Freq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60da      	str	r2, [r3, #12]
        break;
 8002fe2:	e030      	b.n	8003046 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002fee:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6852      	ldr	r2, [r2, #4]
 8002ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60da      	str	r2, [r3, #12]
        break;
 8003002:	e020      	b.n	8003046 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003004:	f7ff fd30 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
        break;
 8003022:	e010      	b.n	8003046 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	b29a      	uxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60da      	str	r2, [r3, #12]
        break;
 800303e:	e002      	b.n	8003046 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	74fb      	strb	r3, [r7, #19]
        break;
 8003044:	bf00      	nop
    }
  }

  return ret;
 8003046:	7cfb      	ldrb	r3, [r7, #19]

}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	efff69f3 	.word	0xefff69f3
 8003054:	40013800 	.word	0x40013800
 8003058:	40021000 	.word	0x40021000
 800305c:	40004400 	.word	0x40004400
 8003060:	40004800 	.word	0x40004800

08003064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01a      	beq.n	800317a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003162:	d10a      	bne.n	800317a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
  }
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80031ba:	f7fd f8b3 	bl	8000324 <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d10e      	bne.n	80031ec <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f82c 	bl	800323a <UART_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e022      	b.n	8003232 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d10e      	bne.n	8003218 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f816 	bl	800323a <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e00c      	b.n	8003232 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	4613      	mov	r3, r2
 8003248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324a:	e02c      	b.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d028      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <UART_WaitOnFlagUntilTimeout+0x30>
 800325a:	f7fd f863 	bl	8000324 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	429a      	cmp	r2, r3
 8003268:	d21d      	bcs.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003278:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e00f      	b.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d0c3      	beq.n	800324c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b09c      	sub	sp, #112	; 0x70
 80032d4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032d6:	f7fc ffcb 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032da:	f000 f861 	bl	80033a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032de:	f000 f95f 	bl	80035a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80032e2:	f000 f93f 	bl	8003564 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80032e6:	f000 f90d 	bl	8003504 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80032ea:	f000 f895 	bl	8003418 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80032ee:	4827      	ldr	r0, [pc, #156]	; (800338c <main+0xbc>)
 80032f0:	f7fd f864 	bl	80003bc <HAL_ADC_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <main+0x2e>
		Error_Handler();
 80032fa:	f000 f99b 	bl	8003634 <Error_Handler>
	}
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 80032fe:	2100      	movs	r1, #0
 8003300:	4822      	ldr	r0, [pc, #136]	; (800338c <main+0xbc>)
 8003302:	f7fd fac5 	bl	8000890 <HAL_ADCEx_Calibration_Start>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <main+0x40>
		Error_Handler();
 800330c:	f000 f992 	bl	8003634 <Error_Handler>
	}
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003310:	491f      	ldr	r1, [pc, #124]	; (8003390 <main+0xc0>)
 8003312:	481e      	ldr	r0, [pc, #120]	; (800338c <main+0xbc>)
 8003314:	f7fd fb26 	bl	8000964 <HAL_ADC_ConfigChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <main+0x52>
		Error_Handler();
 800331e:	f000 f989 	bl	8003634 <Error_Handler>
	}

	/* ### - 4 - Start conversion in DMA mode ################################# */
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) aADCxConvertedData,
 8003322:	2203      	movs	r2, #3
 8003324:	491b      	ldr	r1, [pc, #108]	; (8003394 <main+0xc4>)
 8003326:	4819      	ldr	r0, [pc, #100]	; (800338c <main+0xbc>)
 8003328:	f7fd f9d8 	bl	80006dc <HAL_ADC_Start_DMA>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <main+0x66>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 8003332:	f000 f97f 	bl	8003634 <Error_Handler>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		char transmit_data[100];
		sprintf(transmit_data, "%d,%d,%d\n", aADCxConvertedData[0],
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <main+0xc4>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
				aADCxConvertedData[1], aADCxConvertedData[2]);
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <main+0xc4>)
 800333e:	885b      	ldrh	r3, [r3, #2]
		sprintf(transmit_data, "%d,%d,%d\n", aADCxConvertedData[0],
 8003340:	4619      	mov	r1, r3
				aADCxConvertedData[1], aADCxConvertedData[2]);
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <main+0xc4>)
 8003344:	889b      	ldrh	r3, [r3, #4]
		sprintf(transmit_data, "%d,%d,%d\n", aADCxConvertedData[0],
 8003346:	4638      	mov	r0, r7
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	460b      	mov	r3, r1
 800334c:	4912      	ldr	r1, [pc, #72]	; (8003398 <main+0xc8>)
 800334e:	f000 fb57 	bl	8003a00 <siprintf>
		for (int i = 0; i < sizeof(transmit_data); ++i) {
 8003352:	2300      	movs	r3, #0
 8003354:	667b      	str	r3, [r7, #100]	; 0x64
 8003356:	e012      	b.n	800337e <main+0xae>
			if (transmit_data[i] == '\n') {
 8003358:	463a      	mov	r2, r7
 800335a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335c:	4413      	add	r3, r2
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b0a      	cmp	r3, #10
 8003362:	d109      	bne.n	8003378 <main+0xa8>
				HAL_UART_Transmit(&huart2, (uint8_t *) transmit_data, i + 1, 20);
 8003364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003366:	b29b      	uxth	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	4639      	mov	r1, r7
 800336e:	2314      	movs	r3, #20
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <main+0xcc>)
 8003372:	f7ff fc84 	bl	8002c7e <HAL_UART_Transmit>
				break;
 8003376:	e005      	b.n	8003384 <main+0xb4>
		for (int i = 0; i < sizeof(transmit_data); ++i) {
 8003378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800337a:	3301      	adds	r3, #1
 800337c:	667b      	str	r3, [r7, #100]	; 0x64
 800337e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003380:	2b63      	cmp	r3, #99	; 0x63
 8003382:	d9e9      	bls.n	8003358 <main+0x88>
			}
		}
		HAL_Delay(10);
 8003384:	200a      	movs	r0, #10
 8003386:	f7fc ffd9 	bl	800033c <HAL_Delay>
	while (1) {
 800338a:	e7d4      	b.n	8003336 <main+0x66>
 800338c:	200000bc 	.word	0x200000bc
 8003390:	2000008c 	.word	0x2000008c
 8003394:	200000a4 	.word	0x200000a4
 8003398:	08004224 	.word	0x08004224
 800339c:	20000110 	.word	0x20000110

080033a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b090      	sub	sp, #64	; 0x40
 80033a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033a6:	f107 0318 	add.w	r3, r7, #24
 80033aa:	2228      	movs	r2, #40	; 0x28
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fb1e 	bl	80039f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033c2:	2302      	movs	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033c6:	2301      	movs	r3, #1
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033ca:	2310      	movs	r3, #16
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d2:	f107 0318 	add.w	r3, r7, #24
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fadc 	bl	8001994 <HAL_RCC_OscConfig>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80033e2:	f000 f927 	bl	8003634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e6:	230f      	movs	r3, #15
 80033e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f9b5 	bl	8002770 <HAL_RCC_ClockConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800340c:	f000 f912 	bl	8003634 <Error_Handler>
  }
}
 8003410:	bf00      	nop
 8003412:	3740      	adds	r7, #64	; 0x40
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800341c:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <MX_ADC2_Init+0xe0>)
 800341e:	4a37      	ldr	r2, [pc, #220]	; (80034fc <MX_ADC2_Init+0xe4>)
 8003420:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003424:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003428:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <MX_ADC2_Init+0xe0>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003432:	2201      	movs	r2, #1
 8003434:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003436:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003438:	2201      	movs	r2, #1
 800343a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <MX_ADC2_Init+0xe0>)
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <MX_ADC2_Init+0xe0>)
 800344a:	2201      	movs	r2, #1
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003456:	2203      	movs	r2, #3
 8003458:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <MX_ADC2_Init+0xe0>)
 800345c:	2201      	movs	r2, #1
 800345e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003462:	2204      	movs	r2, #4
 8003464:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <MX_ADC2_Init+0xe0>)
 800346e:	2201      	movs	r2, #1
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003472:	4821      	ldr	r0, [pc, #132]	; (80034f8 <MX_ADC2_Init+0xe0>)
 8003474:	f7fc ffa2 	bl	80003bc <HAL_ADC_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_ADC2_Init+0x6a>
  {
    Error_Handler();
 800347e:	f000 f8d9 	bl	8003634 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <MX_ADC2_Init+0xe8>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <MX_ADC2_Init+0xe8>)
 800348a:	2201      	movs	r2, #1
 800348c:	605a      	str	r2, [r3, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <MX_ADC2_Init+0xe8>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <MX_ADC2_Init+0xe8>)
 8003496:	2204      	movs	r2, #4
 8003498:	609a      	str	r2, [r3, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <MX_ADC2_Init+0xe8>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  sConfig.Offset = 0;
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034a6:	4916      	ldr	r1, [pc, #88]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034a8:	4813      	ldr	r0, [pc, #76]	; (80034f8 <MX_ADC2_Init+0xe0>)
 80034aa:	f7fd fa5b 	bl	8000964 <HAL_ADC_ConfigChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 80034b4:	f000 f8be 	bl	8003634 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034ba:	2202      	movs	r2, #2
 80034bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034c0:	2202      	movs	r2, #2
 80034c2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034c6:	480c      	ldr	r0, [pc, #48]	; (80034f8 <MX_ADC2_Init+0xe0>)
 80034c8:	f7fd fa4c 	bl	8000964 <HAL_ADC_ConfigChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 80034d2:	f000 f8af 	bl	8003634 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034d8:	2203      	movs	r2, #3
 80034da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034de:	2203      	movs	r2, #3
 80034e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034e2:	4907      	ldr	r1, [pc, #28]	; (8003500 <MX_ADC2_Init+0xe8>)
 80034e4:	4804      	ldr	r0, [pc, #16]	; (80034f8 <MX_ADC2_Init+0xe0>)
 80034e6:	f7fd fa3d 	bl	8000964 <HAL_ADC_ConfigChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 80034f0:	f000 f8a0 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200000bc 	.word	0x200000bc
 80034fc:	50000100 	.word	0x50000100
 8003500:	2000008c 	.word	0x2000008c

08003504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <MX_USART2_UART_Init+0x58>)
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <MX_USART2_UART_Init+0x5c>)
 800350c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <MX_USART2_UART_Init+0x58>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <MX_USART2_UART_Init+0x58>)
 800352a:	220c      	movs	r2, #12
 800352c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <MX_USART2_UART_Init+0x58>)
 800353c:	2200      	movs	r2, #0
 800353e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003542:	2200      	movs	r2, #0
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <MX_USART2_UART_Init+0x58>)
 8003548:	f7ff fb48 	bl	8002bdc <HAL_UART_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003552:	f000 f86f 	bl	8003634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000110 	.word	0x20000110
 8003560:	40004400 	.word	0x40004400

08003564 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_DMA_Init+0x38>)
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <MX_DMA_Init+0x38>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6153      	str	r3, [r2, #20]
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <MX_DMA_Init+0x38>)
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	200c      	movs	r0, #12
 8003588:	f7fd fea9 	bl	80012de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800358c:	200c      	movs	r0, #12
 800358e:	f7fd fec2 	bl	8001316 <HAL_NVIC_EnableIRQ>

}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000

080035a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <MX_GPIO_Init+0x8c>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <MX_GPIO_Init+0x8c>)
 80035bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035c0:	6153      	str	r3, [r2, #20]
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <MX_GPIO_Init+0x8c>)
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <MX_GPIO_Init+0x8c>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4a16      	ldr	r2, [pc, #88]	; (800362c <MX_GPIO_Init+0x8c>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	6153      	str	r3, [r2, #20]
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <MX_GPIO_Init+0x8c>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_GPIO_Init+0x8c>)
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <MX_GPIO_Init+0x8c>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6153      	str	r3, [r2, #20]
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_GPIO_Init+0x8c>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80035fe:	2200      	movs	r2, #0
 8003600:	2108      	movs	r1, #8
 8003602:	480b      	ldr	r0, [pc, #44]	; (8003630 <MX_GPIO_Init+0x90>)
 8003604:	f7fe f9ae 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003608:	2308      	movs	r3, #8
 800360a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360c:	2301      	movs	r3, #1
 800360e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	4619      	mov	r1, r3
 800361e:	4804      	ldr	r0, [pc, #16]	; (8003630 <MX_GPIO_Init+0x90>)
 8003620:	f7fe f82a 	bl	8001678 <HAL_GPIO_Init>

}
 8003624:	bf00      	nop
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	48000400 	.word	0x48000400

08003634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_MspInit+0x44>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_MspInit+0x44>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6193      	str	r3, [r2, #24]
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_MspInit+0x44>)
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_MspInit+0x44>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4a08      	ldr	r2, [pc, #32]	; (8003688 <HAL_MspInit+0x44>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	61d3      	str	r3, [r2, #28]
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_MspInit+0x44>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <HAL_ADC_MspInit+0xc8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d14d      	bne.n	800374a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036ae:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <HAL_ADC_MspInit+0xcc>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_ADC_MspInit+0xcc>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6153      	str	r3, [r2, #20]
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_ADC_MspInit+0xcc>)
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_ADC_MspInit+0xcc>)
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	4a23      	ldr	r2, [pc, #140]	; (8003758 <HAL_ADC_MspInit+0xcc>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	6153      	str	r3, [r2, #20]
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_ADC_MspInit+0xcc>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80036de:	2370      	movs	r3, #112	; 0x70
 80036e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036e2:	2303      	movs	r3, #3
 80036e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f4:	f7fd ffc0 	bl	8001678 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80036f8:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_ADC_MspInit+0xd0>)
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_ADC_MspInit+0xd4>)
 80036fc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003704:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_ADC_MspInit+0xd0>)
 800370c:	2280      	movs	r2, #128	; 0x80
 800370e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003716:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_ADC_MspInit+0xd0>)
 800371a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003722:	2220      	movs	r2, #32
 8003724:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800372c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800372e:	480b      	ldr	r0, [pc, #44]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003730:	f7fd fe0b 	bl	800134a <HAL_DMA_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800373a:	f7ff ff7b 	bl	8003634 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003742:	63da      	str	r2, [r3, #60]	; 0x3c
 8003744:	4a05      	ldr	r2, [pc, #20]	; (800375c <HAL_ADC_MspInit+0xd0>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800374a:	bf00      	nop
 800374c:	3728      	adds	r7, #40	; 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	50000100 	.word	0x50000100
 8003758:	40021000 	.word	0x40021000
 800375c:	20000180 	.word	0x20000180
 8003760:	4002001c 	.word	0x4002001c

08003764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_UART_MspInit+0x80>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d129      	bne.n	80037da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_UART_MspInit+0x84>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_UART_MspInit+0x84>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_UART_MspInit+0x84>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_UART_MspInit+0x84>)
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_UART_MspInit+0x84>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	6153      	str	r3, [r2, #20]
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_UART_MspInit+0x84>)
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80037b6:	f248 0304 	movw	r3, #32772	; 0x8004
 80037ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037c8:	2307      	movs	r3, #7
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	4619      	mov	r1, r3
 80037d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d6:	f7fd ff4f 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037da:	bf00      	nop
 80037dc:	3728      	adds	r7, #40	; 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40004400 	.word	0x40004400
 80037e8:	40021000 	.word	0x40021000

080037ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fe:	e7fe      	b.n	80037fe <HardFault_Handler+0x4>

08003800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <MemManage_Handler+0x4>

08003806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <BusFault_Handler+0x4>

0800380c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <UsageFault_Handler+0x4>

08003812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003840:	f7fc fd5c 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}

08003848 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <DMA1_Channel2_IRQHandler+0x10>)
 800384e:	f7fd fe22 	bl	8001496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000180 	.word	0x20000180

0800385c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <_sbrk+0x50>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <_sbrk+0x16>
		heap_end = &end;
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <_sbrk+0x50>)
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <_sbrk+0x54>)
 8003870:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <_sbrk+0x50>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <_sbrk+0x50>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	466a      	mov	r2, sp
 8003882:	4293      	cmp	r3, r2
 8003884:	d907      	bls.n	8003896 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003886:	f000 f889 	bl	800399c <__errno>
 800388a:	4602      	mov	r2, r0
 800388c:	230c      	movs	r3, #12
 800388e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003890:	f04f 33ff 	mov.w	r3, #4294967295
 8003894:	e006      	b.n	80038a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <_sbrk+0x50>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	4a03      	ldr	r2, [pc, #12]	; (80038ac <_sbrk+0x50>)
 80038a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200000ac 	.word	0x200000ac
 80038b0:	200001c8 	.word	0x200001c8

080038b4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <SystemInit+0x84>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <SystemInit+0x84>)
 80038c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <SystemInit+0x88>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <SystemInit+0x88>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <SystemInit+0x88>)
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4918      	ldr	r1, [pc, #96]	; (800393c <SystemInit+0x88>)
 80038da:	4b19      	ldr	r3, [pc, #100]	; (8003940 <SystemInit+0x8c>)
 80038dc:	4013      	ands	r3, r2
 80038de:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <SystemInit+0x88>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <SystemInit+0x88>)
 80038e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <SystemInit+0x88>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a11      	ldr	r2, [pc, #68]	; (800393c <SystemInit+0x88>)
 80038f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <SystemInit+0x88>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a0e      	ldr	r2, [pc, #56]	; (800393c <SystemInit+0x88>)
 8003902:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003906:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <SystemInit+0x88>)
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4a0b      	ldr	r2, [pc, #44]	; (800393c <SystemInit+0x88>)
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <SystemInit+0x88>)
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	4908      	ldr	r1, [pc, #32]	; (800393c <SystemInit+0x88>)
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <SystemInit+0x90>)
 800391c:	4013      	ands	r3, r2
 800391e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <SystemInit+0x88>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <SystemInit+0x84>)
 8003928:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800392c:	609a      	str	r2, [r3, #8]
#endif
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00
 800393c:	40021000 	.word	0x40021000
 8003940:	f87fc00c 	.word	0xf87fc00c
 8003944:	ff00fccc 	.word	0xff00fccc

08003948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003980 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800394c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800394e:	e003      	b.n	8003958 <LoopCopyDataInit>

08003950 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003952:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003954:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003956:	3104      	adds	r1, #4

08003958 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003958:	480b      	ldr	r0, [pc, #44]	; (8003988 <LoopForever+0xa>)
	ldr	r3, =_edata
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <LoopForever+0xe>)
	adds	r2, r0, r1
 800395c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800395e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003960:	d3f6      	bcc.n	8003950 <CopyDataInit>
	ldr	r2, =_sbss
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003964:	e002      	b.n	800396c <LoopFillZerobss>

08003966 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003966:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003968:	f842 3b04 	str.w	r3, [r2], #4

0800396c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <LoopForever+0x16>)
	cmp	r2, r3
 800396e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003970:	d3f9      	bcc.n	8003966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003972:	f7ff ff9f 	bl	80038b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003976:	f000 f817 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800397a:	f7ff fca9 	bl	80032d0 <main>

0800397e <LoopForever>:

LoopForever:
    b LoopForever
 800397e:	e7fe      	b.n	800397e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003980:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003984:	080042a4 	.word	0x080042a4
	ldr	r0, =_sdata
 8003988:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800398c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003990:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003994:	200001c8 	.word	0x200001c8

08003998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003998:	e7fe      	b.n	8003998 <ADC1_2_IRQHandler>
	...

0800399c <__errno>:
 800399c:	4b01      	ldr	r3, [pc, #4]	; (80039a4 <__errno+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4e0d      	ldr	r6, [pc, #52]	; (80039e0 <__libc_init_array+0x38>)
 80039ac:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <__libc_init_array+0x3c>)
 80039ae:	1ba4      	subs	r4, r4, r6
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	2500      	movs	r5, #0
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	4e0b      	ldr	r6, [pc, #44]	; (80039e8 <__libc_init_array+0x40>)
 80039ba:	4c0c      	ldr	r4, [pc, #48]	; (80039ec <__libc_init_array+0x44>)
 80039bc:	f000 fc26 	bl	800420c <_init>
 80039c0:	1ba4      	subs	r4, r4, r6
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	2500      	movs	r5, #0
 80039c6:	42a5      	cmp	r5, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039d0:	4798      	blx	r3
 80039d2:	3501      	adds	r5, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039da:	4798      	blx	r3
 80039dc:	3501      	adds	r5, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	0800429c 	.word	0x0800429c
 80039e4:	0800429c 	.word	0x0800429c
 80039e8:	0800429c 	.word	0x0800429c
 80039ec:	080042a0 	.word	0x080042a0

080039f0 <memset>:
 80039f0:	4402      	add	r2, r0
 80039f2:	4603      	mov	r3, r0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d100      	bne.n	80039fa <memset+0xa>
 80039f8:	4770      	bx	lr
 80039fa:	f803 1b01 	strb.w	r1, [r3], #1
 80039fe:	e7f9      	b.n	80039f4 <memset+0x4>

08003a00 <siprintf>:
 8003a00:	b40e      	push	{r1, r2, r3}
 8003a02:	b500      	push	{lr}
 8003a04:	b09c      	sub	sp, #112	; 0x70
 8003a06:	ab1d      	add	r3, sp, #116	; 0x74
 8003a08:	9002      	str	r0, [sp, #8]
 8003a0a:	9006      	str	r0, [sp, #24]
 8003a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a10:	4809      	ldr	r0, [pc, #36]	; (8003a38 <siprintf+0x38>)
 8003a12:	9107      	str	r1, [sp, #28]
 8003a14:	9104      	str	r1, [sp, #16]
 8003a16:	4909      	ldr	r1, [pc, #36]	; (8003a3c <siprintf+0x3c>)
 8003a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a1c:	9105      	str	r1, [sp, #20]
 8003a1e:	6800      	ldr	r0, [r0, #0]
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	a902      	add	r1, sp, #8
 8003a24:	f000 f866 	bl	8003af4 <_svfiprintf_r>
 8003a28:	9b02      	ldr	r3, [sp, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	b01c      	add	sp, #112	; 0x70
 8003a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a34:	b003      	add	sp, #12
 8003a36:	4770      	bx	lr
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	ffff0208 	.word	0xffff0208

08003a40 <__ssputs_r>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	688e      	ldr	r6, [r1, #8]
 8003a46:	429e      	cmp	r6, r3
 8003a48:	4682      	mov	sl, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4690      	mov	r8, r2
 8003a4e:	4699      	mov	r9, r3
 8003a50:	d837      	bhi.n	8003ac2 <__ssputs_r+0x82>
 8003a52:	898a      	ldrh	r2, [r1, #12]
 8003a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a58:	d031      	beq.n	8003abe <__ssputs_r+0x7e>
 8003a5a:	6825      	ldr	r5, [r4, #0]
 8003a5c:	6909      	ldr	r1, [r1, #16]
 8003a5e:	1a6f      	subs	r7, r5, r1
 8003a60:	6965      	ldr	r5, [r4, #20]
 8003a62:	2302      	movs	r3, #2
 8003a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a68:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a6c:	f109 0301 	add.w	r3, r9, #1
 8003a70:	443b      	add	r3, r7
 8003a72:	429d      	cmp	r5, r3
 8003a74:	bf38      	it	cc
 8003a76:	461d      	movcc	r5, r3
 8003a78:	0553      	lsls	r3, r2, #21
 8003a7a:	d530      	bpl.n	8003ade <__ssputs_r+0x9e>
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	f000 fb2b 	bl	80040d8 <_malloc_r>
 8003a82:	4606      	mov	r6, r0
 8003a84:	b950      	cbnz	r0, 8003a9c <__ssputs_r+0x5c>
 8003a86:	230c      	movs	r3, #12
 8003a88:	f8ca 3000 	str.w	r3, [sl]
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a92:	81a3      	strh	r3, [r4, #12]
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9c:	463a      	mov	r2, r7
 8003a9e:	6921      	ldr	r1, [r4, #16]
 8003aa0:	f000 faa8 	bl	8003ff4 <memcpy>
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	6126      	str	r6, [r4, #16]
 8003ab2:	6165      	str	r5, [r4, #20]
 8003ab4:	443e      	add	r6, r7
 8003ab6:	1bed      	subs	r5, r5, r7
 8003ab8:	6026      	str	r6, [r4, #0]
 8003aba:	60a5      	str	r5, [r4, #8]
 8003abc:	464e      	mov	r6, r9
 8003abe:	454e      	cmp	r6, r9
 8003ac0:	d900      	bls.n	8003ac4 <__ssputs_r+0x84>
 8003ac2:	464e      	mov	r6, r9
 8003ac4:	4632      	mov	r2, r6
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	f000 fa9e 	bl	800400a <memmove>
 8003ace:	68a3      	ldr	r3, [r4, #8]
 8003ad0:	1b9b      	subs	r3, r3, r6
 8003ad2:	60a3      	str	r3, [r4, #8]
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	441e      	add	r6, r3
 8003ad8:	6026      	str	r6, [r4, #0]
 8003ada:	2000      	movs	r0, #0
 8003adc:	e7dc      	b.n	8003a98 <__ssputs_r+0x58>
 8003ade:	462a      	mov	r2, r5
 8003ae0:	f000 fb54 	bl	800418c <_realloc_r>
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d1e2      	bne.n	8003ab0 <__ssputs_r+0x70>
 8003aea:	6921      	ldr	r1, [r4, #16]
 8003aec:	4650      	mov	r0, sl
 8003aee:	f000 faa5 	bl	800403c <_free_r>
 8003af2:	e7c8      	b.n	8003a86 <__ssputs_r+0x46>

08003af4 <_svfiprintf_r>:
 8003af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af8:	461d      	mov	r5, r3
 8003afa:	898b      	ldrh	r3, [r1, #12]
 8003afc:	061f      	lsls	r7, r3, #24
 8003afe:	b09d      	sub	sp, #116	; 0x74
 8003b00:	4680      	mov	r8, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	4616      	mov	r6, r2
 8003b06:	d50f      	bpl.n	8003b28 <_svfiprintf_r+0x34>
 8003b08:	690b      	ldr	r3, [r1, #16]
 8003b0a:	b96b      	cbnz	r3, 8003b28 <_svfiprintf_r+0x34>
 8003b0c:	2140      	movs	r1, #64	; 0x40
 8003b0e:	f000 fae3 	bl	80040d8 <_malloc_r>
 8003b12:	6020      	str	r0, [r4, #0]
 8003b14:	6120      	str	r0, [r4, #16]
 8003b16:	b928      	cbnz	r0, 8003b24 <_svfiprintf_r+0x30>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	f8c8 3000 	str.w	r3, [r8]
 8003b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b22:	e0c8      	b.n	8003cb6 <_svfiprintf_r+0x1c2>
 8003b24:	2340      	movs	r3, #64	; 0x40
 8003b26:	6163      	str	r3, [r4, #20]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b32:	2330      	movs	r3, #48	; 0x30
 8003b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b38:	9503      	str	r5, [sp, #12]
 8003b3a:	f04f 0b01 	mov.w	fp, #1
 8003b3e:	4637      	mov	r7, r6
 8003b40:	463d      	mov	r5, r7
 8003b42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b46:	b10b      	cbz	r3, 8003b4c <_svfiprintf_r+0x58>
 8003b48:	2b25      	cmp	r3, #37	; 0x25
 8003b4a:	d13e      	bne.n	8003bca <_svfiprintf_r+0xd6>
 8003b4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b50:	d00b      	beq.n	8003b6a <_svfiprintf_r+0x76>
 8003b52:	4653      	mov	r3, sl
 8003b54:	4632      	mov	r2, r6
 8003b56:	4621      	mov	r1, r4
 8003b58:	4640      	mov	r0, r8
 8003b5a:	f7ff ff71 	bl	8003a40 <__ssputs_r>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f000 80a4 	beq.w	8003cac <_svfiprintf_r+0x1b8>
 8003b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b66:	4453      	add	r3, sl
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6a:	783b      	ldrb	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 809d 	beq.w	8003cac <_svfiprintf_r+0x1b8>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295
 8003b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b7c:	9304      	str	r3, [sp, #16]
 8003b7e:	9307      	str	r3, [sp, #28]
 8003b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b84:	931a      	str	r3, [sp, #104]	; 0x68
 8003b86:	462f      	mov	r7, r5
 8003b88:	2205      	movs	r2, #5
 8003b8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003b8e:	4850      	ldr	r0, [pc, #320]	; (8003cd0 <_svfiprintf_r+0x1dc>)
 8003b90:	f7fc fb1e 	bl	80001d0 <memchr>
 8003b94:	9b04      	ldr	r3, [sp, #16]
 8003b96:	b9d0      	cbnz	r0, 8003bce <_svfiprintf_r+0xda>
 8003b98:	06d9      	lsls	r1, r3, #27
 8003b9a:	bf44      	itt	mi
 8003b9c:	2220      	movmi	r2, #32
 8003b9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ba2:	071a      	lsls	r2, r3, #28
 8003ba4:	bf44      	itt	mi
 8003ba6:	222b      	movmi	r2, #43	; 0x2b
 8003ba8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bac:	782a      	ldrb	r2, [r5, #0]
 8003bae:	2a2a      	cmp	r2, #42	; 0x2a
 8003bb0:	d015      	beq.n	8003bde <_svfiprintf_r+0xea>
 8003bb2:	9a07      	ldr	r2, [sp, #28]
 8003bb4:	462f      	mov	r7, r5
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	250a      	movs	r5, #10
 8003bba:	4639      	mov	r1, r7
 8003bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bc0:	3b30      	subs	r3, #48	; 0x30
 8003bc2:	2b09      	cmp	r3, #9
 8003bc4:	d94d      	bls.n	8003c62 <_svfiprintf_r+0x16e>
 8003bc6:	b1b8      	cbz	r0, 8003bf8 <_svfiprintf_r+0x104>
 8003bc8:	e00f      	b.n	8003bea <_svfiprintf_r+0xf6>
 8003bca:	462f      	mov	r7, r5
 8003bcc:	e7b8      	b.n	8003b40 <_svfiprintf_r+0x4c>
 8003bce:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <_svfiprintf_r+0x1dc>)
 8003bd0:	1a80      	subs	r0, r0, r2
 8003bd2:	fa0b f000 	lsl.w	r0, fp, r0
 8003bd6:	4318      	orrs	r0, r3
 8003bd8:	9004      	str	r0, [sp, #16]
 8003bda:	463d      	mov	r5, r7
 8003bdc:	e7d3      	b.n	8003b86 <_svfiprintf_r+0x92>
 8003bde:	9a03      	ldr	r2, [sp, #12]
 8003be0:	1d11      	adds	r1, r2, #4
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	9103      	str	r1, [sp, #12]
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	db01      	blt.n	8003bee <_svfiprintf_r+0xfa>
 8003bea:	9207      	str	r2, [sp, #28]
 8003bec:	e004      	b.n	8003bf8 <_svfiprintf_r+0x104>
 8003bee:	4252      	negs	r2, r2
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	9207      	str	r2, [sp, #28]
 8003bf6:	9304      	str	r3, [sp, #16]
 8003bf8:	783b      	ldrb	r3, [r7, #0]
 8003bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8003bfc:	d10c      	bne.n	8003c18 <_svfiprintf_r+0x124>
 8003bfe:	787b      	ldrb	r3, [r7, #1]
 8003c00:	2b2a      	cmp	r3, #42	; 0x2a
 8003c02:	d133      	bne.n	8003c6c <_svfiprintf_r+0x178>
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	9203      	str	r2, [sp, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bfb8      	it	lt
 8003c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c14:	3702      	adds	r7, #2
 8003c16:	9305      	str	r3, [sp, #20]
 8003c18:	4d2e      	ldr	r5, [pc, #184]	; (8003cd4 <_svfiprintf_r+0x1e0>)
 8003c1a:	7839      	ldrb	r1, [r7, #0]
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7fc fad6 	bl	80001d0 <memchr>
 8003c24:	b138      	cbz	r0, 8003c36 <_svfiprintf_r+0x142>
 8003c26:	2340      	movs	r3, #64	; 0x40
 8003c28:	1b40      	subs	r0, r0, r5
 8003c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c2e:	9b04      	ldr	r3, [sp, #16]
 8003c30:	4303      	orrs	r3, r0
 8003c32:	3701      	adds	r7, #1
 8003c34:	9304      	str	r3, [sp, #16]
 8003c36:	7839      	ldrb	r1, [r7, #0]
 8003c38:	4827      	ldr	r0, [pc, #156]	; (8003cd8 <_svfiprintf_r+0x1e4>)
 8003c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c3e:	2206      	movs	r2, #6
 8003c40:	1c7e      	adds	r6, r7, #1
 8003c42:	f7fc fac5 	bl	80001d0 <memchr>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d038      	beq.n	8003cbc <_svfiprintf_r+0x1c8>
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <_svfiprintf_r+0x1e8>)
 8003c4c:	bb13      	cbnz	r3, 8003c94 <_svfiprintf_r+0x1a0>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	3307      	adds	r3, #7
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	3308      	adds	r3, #8
 8003c58:	9303      	str	r3, [sp, #12]
 8003c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5c:	444b      	add	r3, r9
 8003c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c60:	e76d      	b.n	8003b3e <_svfiprintf_r+0x4a>
 8003c62:	fb05 3202 	mla	r2, r5, r2, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	460f      	mov	r7, r1
 8003c6a:	e7a6      	b.n	8003bba <_svfiprintf_r+0xc6>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	3701      	adds	r7, #1
 8003c70:	9305      	str	r3, [sp, #20]
 8003c72:	4619      	mov	r1, r3
 8003c74:	250a      	movs	r5, #10
 8003c76:	4638      	mov	r0, r7
 8003c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c7c:	3a30      	subs	r2, #48	; 0x30
 8003c7e:	2a09      	cmp	r2, #9
 8003c80:	d903      	bls.n	8003c8a <_svfiprintf_r+0x196>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0c8      	beq.n	8003c18 <_svfiprintf_r+0x124>
 8003c86:	9105      	str	r1, [sp, #20]
 8003c88:	e7c6      	b.n	8003c18 <_svfiprintf_r+0x124>
 8003c8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003c8e:	2301      	movs	r3, #1
 8003c90:	4607      	mov	r7, r0
 8003c92:	e7f0      	b.n	8003c76 <_svfiprintf_r+0x182>
 8003c94:	ab03      	add	r3, sp, #12
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <_svfiprintf_r+0x1ec>)
 8003c9c:	a904      	add	r1, sp, #16
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f3af 8000 	nop.w
 8003ca4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ca8:	4681      	mov	r9, r0
 8003caa:	d1d6      	bne.n	8003c5a <_svfiprintf_r+0x166>
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	065b      	lsls	r3, r3, #25
 8003cb0:	f53f af35 	bmi.w	8003b1e <_svfiprintf_r+0x2a>
 8003cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb6:	b01d      	add	sp, #116	; 0x74
 8003cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbc:	ab03      	add	r3, sp, #12
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <_svfiprintf_r+0x1ec>)
 8003cc4:	a904      	add	r1, sp, #16
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f000 f882 	bl	8003dd0 <_printf_i>
 8003ccc:	e7ea      	b.n	8003ca4 <_svfiprintf_r+0x1b0>
 8003cce:	bf00      	nop
 8003cd0:	08004268 	.word	0x08004268
 8003cd4:	0800426e 	.word	0x0800426e
 8003cd8:	08004272 	.word	0x08004272
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	08003a41 	.word	0x08003a41

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4691      	mov	r9, r2
 8003cea:	461f      	mov	r7, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfb8      	it	lt
 8003cf8:	4613      	movlt	r3, r2
 8003cfa:	f8c9 3000 	str.w	r3, [r9]
 8003cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d02:	4606      	mov	r6, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	b112      	cbz	r2, 8003d0e <_printf_common+0x2a>
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f8c9 3000 	str.w	r3, [r9]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	0699      	lsls	r1, r3, #26
 8003d12:	bf42      	ittt	mi
 8003d14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d18:	3302      	addmi	r3, #2
 8003d1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d1e:	6825      	ldr	r5, [r4, #0]
 8003d20:	f015 0506 	ands.w	r5, r5, #6
 8003d24:	d107      	bne.n	8003d36 <_printf_common+0x52>
 8003d26:	f104 0a19 	add.w	sl, r4, #25
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	42ab      	cmp	r3, r5
 8003d34:	dc28      	bgt.n	8003d88 <_printf_common+0xa4>
 8003d36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	3300      	adds	r3, #0
 8003d3e:	bf18      	it	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	0692      	lsls	r2, r2, #26
 8003d44:	d42d      	bmi.n	8003da2 <_printf_common+0xbe>
 8003d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	47c0      	blx	r8
 8003d50:	3001      	adds	r0, #1
 8003d52:	d020      	beq.n	8003d96 <_printf_common+0xb2>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	68e5      	ldr	r5, [r4, #12]
 8003d58:	f8d9 2000 	ldr.w	r2, [r9]
 8003d5c:	f003 0306 	and.w	r3, r3, #6
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	bf08      	it	eq
 8003d64:	1aad      	subeq	r5, r5, r2
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	6922      	ldr	r2, [r4, #16]
 8003d6a:	bf0c      	ite	eq
 8003d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d70:	2500      	movne	r5, #0
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bfc4      	itt	gt
 8003d76:	1a9b      	subgt	r3, r3, r2
 8003d78:	18ed      	addgt	r5, r5, r3
 8003d7a:	f04f 0900 	mov.w	r9, #0
 8003d7e:	341a      	adds	r4, #26
 8003d80:	454d      	cmp	r5, r9
 8003d82:	d11a      	bne.n	8003dba <_printf_common+0xd6>
 8003d84:	2000      	movs	r0, #0
 8003d86:	e008      	b.n	8003d9a <_printf_common+0xb6>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4652      	mov	r2, sl
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4630      	mov	r0, r6
 8003d90:	47c0      	blx	r8
 8003d92:	3001      	adds	r0, #1
 8003d94:	d103      	bne.n	8003d9e <_printf_common+0xba>
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9e:	3501      	adds	r5, #1
 8003da0:	e7c3      	b.n	8003d2a <_printf_common+0x46>
 8003da2:	18e1      	adds	r1, r4, r3
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	2030      	movs	r0, #48	; 0x30
 8003da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dac:	4422      	add	r2, r4
 8003dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003db2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003db6:	3302      	adds	r3, #2
 8003db8:	e7c5      	b.n	8003d46 <_printf_common+0x62>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4639      	mov	r1, r7
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	47c0      	blx	r8
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d0e6      	beq.n	8003d96 <_printf_common+0xb2>
 8003dc8:	f109 0901 	add.w	r9, r9, #1
 8003dcc:	e7d8      	b.n	8003d80 <_printf_common+0x9c>
	...

08003dd0 <_printf_i>:
 8003dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003dd8:	460c      	mov	r4, r1
 8003dda:	7e09      	ldrb	r1, [r1, #24]
 8003ddc:	b085      	sub	sp, #20
 8003dde:	296e      	cmp	r1, #110	; 0x6e
 8003de0:	4617      	mov	r7, r2
 8003de2:	4606      	mov	r6, r0
 8003de4:	4698      	mov	r8, r3
 8003de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003de8:	f000 80b3 	beq.w	8003f52 <_printf_i+0x182>
 8003dec:	d822      	bhi.n	8003e34 <_printf_i+0x64>
 8003dee:	2963      	cmp	r1, #99	; 0x63
 8003df0:	d036      	beq.n	8003e60 <_printf_i+0x90>
 8003df2:	d80a      	bhi.n	8003e0a <_printf_i+0x3a>
 8003df4:	2900      	cmp	r1, #0
 8003df6:	f000 80b9 	beq.w	8003f6c <_printf_i+0x19c>
 8003dfa:	2958      	cmp	r1, #88	; 0x58
 8003dfc:	f000 8083 	beq.w	8003f06 <_printf_i+0x136>
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e08:	e032      	b.n	8003e70 <_printf_i+0xa0>
 8003e0a:	2964      	cmp	r1, #100	; 0x64
 8003e0c:	d001      	beq.n	8003e12 <_printf_i+0x42>
 8003e0e:	2969      	cmp	r1, #105	; 0x69
 8003e10:	d1f6      	bne.n	8003e00 <_printf_i+0x30>
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	0605      	lsls	r5, r0, #24
 8003e18:	f103 0104 	add.w	r1, r3, #4
 8003e1c:	d52a      	bpl.n	8003e74 <_printf_i+0xa4>
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6011      	str	r1, [r2, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da03      	bge.n	8003e2e <_printf_i+0x5e>
 8003e26:	222d      	movs	r2, #45	; 0x2d
 8003e28:	425b      	negs	r3, r3
 8003e2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e2e:	486f      	ldr	r0, [pc, #444]	; (8003fec <_printf_i+0x21c>)
 8003e30:	220a      	movs	r2, #10
 8003e32:	e039      	b.n	8003ea8 <_printf_i+0xd8>
 8003e34:	2973      	cmp	r1, #115	; 0x73
 8003e36:	f000 809d 	beq.w	8003f74 <_printf_i+0x1a4>
 8003e3a:	d808      	bhi.n	8003e4e <_printf_i+0x7e>
 8003e3c:	296f      	cmp	r1, #111	; 0x6f
 8003e3e:	d020      	beq.n	8003e82 <_printf_i+0xb2>
 8003e40:	2970      	cmp	r1, #112	; 0x70
 8003e42:	d1dd      	bne.n	8003e00 <_printf_i+0x30>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	f043 0320 	orr.w	r3, r3, #32
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	e003      	b.n	8003e56 <_printf_i+0x86>
 8003e4e:	2975      	cmp	r1, #117	; 0x75
 8003e50:	d017      	beq.n	8003e82 <_printf_i+0xb2>
 8003e52:	2978      	cmp	r1, #120	; 0x78
 8003e54:	d1d4      	bne.n	8003e00 <_printf_i+0x30>
 8003e56:	2378      	movs	r3, #120	; 0x78
 8003e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e5c:	4864      	ldr	r0, [pc, #400]	; (8003ff0 <_printf_i+0x220>)
 8003e5e:	e055      	b.n	8003f0c <_printf_i+0x13c>
 8003e60:	6813      	ldr	r3, [r2, #0]
 8003e62:	1d19      	adds	r1, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6011      	str	r1, [r2, #0]
 8003e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e70:	2301      	movs	r3, #1
 8003e72:	e08c      	b.n	8003f8e <_printf_i+0x1be>
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6011      	str	r1, [r2, #0]
 8003e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e7c:	bf18      	it	ne
 8003e7e:	b21b      	sxthne	r3, r3
 8003e80:	e7cf      	b.n	8003e22 <_printf_i+0x52>
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	6825      	ldr	r5, [r4, #0]
 8003e86:	1d18      	adds	r0, r3, #4
 8003e88:	6010      	str	r0, [r2, #0]
 8003e8a:	0628      	lsls	r0, r5, #24
 8003e8c:	d501      	bpl.n	8003e92 <_printf_i+0xc2>
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	e002      	b.n	8003e98 <_printf_i+0xc8>
 8003e92:	0668      	lsls	r0, r5, #25
 8003e94:	d5fb      	bpl.n	8003e8e <_printf_i+0xbe>
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	4854      	ldr	r0, [pc, #336]	; (8003fec <_printf_i+0x21c>)
 8003e9a:	296f      	cmp	r1, #111	; 0x6f
 8003e9c:	bf14      	ite	ne
 8003e9e:	220a      	movne	r2, #10
 8003ea0:	2208      	moveq	r2, #8
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ea8:	6865      	ldr	r5, [r4, #4]
 8003eaa:	60a5      	str	r5, [r4, #8]
 8003eac:	2d00      	cmp	r5, #0
 8003eae:	f2c0 8095 	blt.w	8003fdc <_printf_i+0x20c>
 8003eb2:	6821      	ldr	r1, [r4, #0]
 8003eb4:	f021 0104 	bic.w	r1, r1, #4
 8003eb8:	6021      	str	r1, [r4, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d13d      	bne.n	8003f3a <_printf_i+0x16a>
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	f040 808e 	bne.w	8003fe0 <_printf_i+0x210>
 8003ec4:	4665      	mov	r5, ip
 8003ec6:	2a08      	cmp	r2, #8
 8003ec8:	d10b      	bne.n	8003ee2 <_printf_i+0x112>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	07db      	lsls	r3, r3, #31
 8003ece:	d508      	bpl.n	8003ee2 <_printf_i+0x112>
 8003ed0:	6923      	ldr	r3, [r4, #16]
 8003ed2:	6862      	ldr	r2, [r4, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	bfde      	ittt	le
 8003ed8:	2330      	movle	r3, #48	; 0x30
 8003eda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ede:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ee2:	ebac 0305 	sub.w	r3, ip, r5
 8003ee6:	6123      	str	r3, [r4, #16]
 8003ee8:	f8cd 8000 	str.w	r8, [sp]
 8003eec:	463b      	mov	r3, r7
 8003eee:	aa03      	add	r2, sp, #12
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7ff fef6 	bl	8003ce4 <_printf_common>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d14d      	bne.n	8003f98 <_printf_i+0x1c8>
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	b005      	add	sp, #20
 8003f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f06:	4839      	ldr	r0, [pc, #228]	; (8003fec <_printf_i+0x21c>)
 8003f08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	6821      	ldr	r1, [r4, #0]
 8003f10:	1d1d      	adds	r5, r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6015      	str	r5, [r2, #0]
 8003f16:	060a      	lsls	r2, r1, #24
 8003f18:	d50b      	bpl.n	8003f32 <_printf_i+0x162>
 8003f1a:	07ca      	lsls	r2, r1, #31
 8003f1c:	bf44      	itt	mi
 8003f1e:	f041 0120 	orrmi.w	r1, r1, #32
 8003f22:	6021      	strmi	r1, [r4, #0]
 8003f24:	b91b      	cbnz	r3, 8003f2e <_printf_i+0x15e>
 8003f26:	6822      	ldr	r2, [r4, #0]
 8003f28:	f022 0220 	bic.w	r2, r2, #32
 8003f2c:	6022      	str	r2, [r4, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	e7b7      	b.n	8003ea2 <_printf_i+0xd2>
 8003f32:	064d      	lsls	r5, r1, #25
 8003f34:	bf48      	it	mi
 8003f36:	b29b      	uxthmi	r3, r3
 8003f38:	e7ef      	b.n	8003f1a <_printf_i+0x14a>
 8003f3a:	4665      	mov	r5, ip
 8003f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f40:	fb02 3311 	mls	r3, r2, r1, r3
 8003f44:	5cc3      	ldrb	r3, [r0, r3]
 8003f46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d1f5      	bne.n	8003f3c <_printf_i+0x16c>
 8003f50:	e7b9      	b.n	8003ec6 <_printf_i+0xf6>
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	6825      	ldr	r5, [r4, #0]
 8003f56:	6961      	ldr	r1, [r4, #20]
 8003f58:	1d18      	adds	r0, r3, #4
 8003f5a:	6010      	str	r0, [r2, #0]
 8003f5c:	0628      	lsls	r0, r5, #24
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	d501      	bpl.n	8003f66 <_printf_i+0x196>
 8003f62:	6019      	str	r1, [r3, #0]
 8003f64:	e002      	b.n	8003f6c <_printf_i+0x19c>
 8003f66:	066a      	lsls	r2, r5, #25
 8003f68:	d5fb      	bpl.n	8003f62 <_printf_i+0x192>
 8003f6a:	8019      	strh	r1, [r3, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6123      	str	r3, [r4, #16]
 8003f70:	4665      	mov	r5, ip
 8003f72:	e7b9      	b.n	8003ee8 <_printf_i+0x118>
 8003f74:	6813      	ldr	r3, [r2, #0]
 8003f76:	1d19      	adds	r1, r3, #4
 8003f78:	6011      	str	r1, [r2, #0]
 8003f7a:	681d      	ldr	r5, [r3, #0]
 8003f7c:	6862      	ldr	r2, [r4, #4]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4628      	mov	r0, r5
 8003f82:	f7fc f925 	bl	80001d0 <memchr>
 8003f86:	b108      	cbz	r0, 8003f8c <_printf_i+0x1bc>
 8003f88:	1b40      	subs	r0, r0, r5
 8003f8a:	6060      	str	r0, [r4, #4]
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	6123      	str	r3, [r4, #16]
 8003f90:	2300      	movs	r3, #0
 8003f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f96:	e7a7      	b.n	8003ee8 <_printf_i+0x118>
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	462a      	mov	r2, r5
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d0aa      	beq.n	8003efc <_printf_i+0x12c>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	079b      	lsls	r3, r3, #30
 8003faa:	d413      	bmi.n	8003fd4 <_printf_i+0x204>
 8003fac:	68e0      	ldr	r0, [r4, #12]
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	4298      	cmp	r0, r3
 8003fb2:	bfb8      	it	lt
 8003fb4:	4618      	movlt	r0, r3
 8003fb6:	e7a3      	b.n	8003f00 <_printf_i+0x130>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	464a      	mov	r2, r9
 8003fbc:	4639      	mov	r1, r7
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	47c0      	blx	r8
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d09a      	beq.n	8003efc <_printf_i+0x12c>
 8003fc6:	3501      	adds	r5, #1
 8003fc8:	68e3      	ldr	r3, [r4, #12]
 8003fca:	9a03      	ldr	r2, [sp, #12]
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	42ab      	cmp	r3, r5
 8003fd0:	dcf2      	bgt.n	8003fb8 <_printf_i+0x1e8>
 8003fd2:	e7eb      	b.n	8003fac <_printf_i+0x1dc>
 8003fd4:	2500      	movs	r5, #0
 8003fd6:	f104 0919 	add.w	r9, r4, #25
 8003fda:	e7f5      	b.n	8003fc8 <_printf_i+0x1f8>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ac      	bne.n	8003f3a <_printf_i+0x16a>
 8003fe0:	7803      	ldrb	r3, [r0, #0]
 8003fe2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fea:	e76c      	b.n	8003ec6 <_printf_i+0xf6>
 8003fec:	08004279 	.word	0x08004279
 8003ff0:	0800428a 	.word	0x0800428a

08003ff4 <memcpy>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	1e43      	subs	r3, r0, #1
 8003ff8:	440a      	add	r2, r1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	d100      	bne.n	8004000 <memcpy+0xc>
 8003ffe:	bd10      	pop	{r4, pc}
 8004000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004008:	e7f7      	b.n	8003ffa <memcpy+0x6>

0800400a <memmove>:
 800400a:	4288      	cmp	r0, r1
 800400c:	b510      	push	{r4, lr}
 800400e:	eb01 0302 	add.w	r3, r1, r2
 8004012:	d807      	bhi.n	8004024 <memmove+0x1a>
 8004014:	1e42      	subs	r2, r0, #1
 8004016:	4299      	cmp	r1, r3
 8004018:	d00a      	beq.n	8004030 <memmove+0x26>
 800401a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004022:	e7f8      	b.n	8004016 <memmove+0xc>
 8004024:	4283      	cmp	r3, r0
 8004026:	d9f5      	bls.n	8004014 <memmove+0xa>
 8004028:	1881      	adds	r1, r0, r2
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	42d3      	cmn	r3, r2
 800402e:	d100      	bne.n	8004032 <memmove+0x28>
 8004030:	bd10      	pop	{r4, pc}
 8004032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004036:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800403a:	e7f7      	b.n	800402c <memmove+0x22>

0800403c <_free_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4605      	mov	r5, r0
 8004040:	2900      	cmp	r1, #0
 8004042:	d045      	beq.n	80040d0 <_free_r+0x94>
 8004044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004048:	1f0c      	subs	r4, r1, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	bfb8      	it	lt
 800404e:	18e4      	addlt	r4, r4, r3
 8004050:	f000 f8d2 	bl	80041f8 <__malloc_lock>
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <_free_r+0x98>)
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	4610      	mov	r0, r2
 800405a:	b933      	cbnz	r3, 800406a <_free_r+0x2e>
 800405c:	6063      	str	r3, [r4, #4]
 800405e:	6014      	str	r4, [r2, #0]
 8004060:	4628      	mov	r0, r5
 8004062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004066:	f000 b8c8 	b.w	80041fa <__malloc_unlock>
 800406a:	42a3      	cmp	r3, r4
 800406c:	d90c      	bls.n	8004088 <_free_r+0x4c>
 800406e:	6821      	ldr	r1, [r4, #0]
 8004070:	1862      	adds	r2, r4, r1
 8004072:	4293      	cmp	r3, r2
 8004074:	bf04      	itt	eq
 8004076:	681a      	ldreq	r2, [r3, #0]
 8004078:	685b      	ldreq	r3, [r3, #4]
 800407a:	6063      	str	r3, [r4, #4]
 800407c:	bf04      	itt	eq
 800407e:	1852      	addeq	r2, r2, r1
 8004080:	6022      	streq	r2, [r4, #0]
 8004082:	6004      	str	r4, [r0, #0]
 8004084:	e7ec      	b.n	8004060 <_free_r+0x24>
 8004086:	4613      	mov	r3, r2
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	b10a      	cbz	r2, 8004090 <_free_r+0x54>
 800408c:	42a2      	cmp	r2, r4
 800408e:	d9fa      	bls.n	8004086 <_free_r+0x4a>
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	1858      	adds	r0, r3, r1
 8004094:	42a0      	cmp	r0, r4
 8004096:	d10b      	bne.n	80040b0 <_free_r+0x74>
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	4401      	add	r1, r0
 800409c:	1858      	adds	r0, r3, r1
 800409e:	4282      	cmp	r2, r0
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	d1dd      	bne.n	8004060 <_free_r+0x24>
 80040a4:	6810      	ldr	r0, [r2, #0]
 80040a6:	6852      	ldr	r2, [r2, #4]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	4401      	add	r1, r0
 80040ac:	6019      	str	r1, [r3, #0]
 80040ae:	e7d7      	b.n	8004060 <_free_r+0x24>
 80040b0:	d902      	bls.n	80040b8 <_free_r+0x7c>
 80040b2:	230c      	movs	r3, #12
 80040b4:	602b      	str	r3, [r5, #0]
 80040b6:	e7d3      	b.n	8004060 <_free_r+0x24>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	1821      	adds	r1, r4, r0
 80040bc:	428a      	cmp	r2, r1
 80040be:	bf04      	itt	eq
 80040c0:	6811      	ldreq	r1, [r2, #0]
 80040c2:	6852      	ldreq	r2, [r2, #4]
 80040c4:	6062      	str	r2, [r4, #4]
 80040c6:	bf04      	itt	eq
 80040c8:	1809      	addeq	r1, r1, r0
 80040ca:	6021      	streq	r1, [r4, #0]
 80040cc:	605c      	str	r4, [r3, #4]
 80040ce:	e7c7      	b.n	8004060 <_free_r+0x24>
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
 80040d2:	bf00      	nop
 80040d4:	200000b0 	.word	0x200000b0

080040d8 <_malloc_r>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	1ccd      	adds	r5, r1, #3
 80040dc:	f025 0503 	bic.w	r5, r5, #3
 80040e0:	3508      	adds	r5, #8
 80040e2:	2d0c      	cmp	r5, #12
 80040e4:	bf38      	it	cc
 80040e6:	250c      	movcc	r5, #12
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	4606      	mov	r6, r0
 80040ec:	db01      	blt.n	80040f2 <_malloc_r+0x1a>
 80040ee:	42a9      	cmp	r1, r5
 80040f0:	d903      	bls.n	80040fa <_malloc_r+0x22>
 80040f2:	230c      	movs	r3, #12
 80040f4:	6033      	str	r3, [r6, #0]
 80040f6:	2000      	movs	r0, #0
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	f000 f87d 	bl	80041f8 <__malloc_lock>
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <_malloc_r+0xac>)
 8004100:	6814      	ldr	r4, [r2, #0]
 8004102:	4621      	mov	r1, r4
 8004104:	b991      	cbnz	r1, 800412c <_malloc_r+0x54>
 8004106:	4c20      	ldr	r4, [pc, #128]	; (8004188 <_malloc_r+0xb0>)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	b91b      	cbnz	r3, 8004114 <_malloc_r+0x3c>
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f863 	bl	80041d8 <_sbrk_r>
 8004112:	6020      	str	r0, [r4, #0]
 8004114:	4629      	mov	r1, r5
 8004116:	4630      	mov	r0, r6
 8004118:	f000 f85e 	bl	80041d8 <_sbrk_r>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	d124      	bne.n	800416a <_malloc_r+0x92>
 8004120:	230c      	movs	r3, #12
 8004122:	6033      	str	r3, [r6, #0]
 8004124:	4630      	mov	r0, r6
 8004126:	f000 f868 	bl	80041fa <__malloc_unlock>
 800412a:	e7e4      	b.n	80040f6 <_malloc_r+0x1e>
 800412c:	680b      	ldr	r3, [r1, #0]
 800412e:	1b5b      	subs	r3, r3, r5
 8004130:	d418      	bmi.n	8004164 <_malloc_r+0x8c>
 8004132:	2b0b      	cmp	r3, #11
 8004134:	d90f      	bls.n	8004156 <_malloc_r+0x7e>
 8004136:	600b      	str	r3, [r1, #0]
 8004138:	50cd      	str	r5, [r1, r3]
 800413a:	18cc      	adds	r4, r1, r3
 800413c:	4630      	mov	r0, r6
 800413e:	f000 f85c 	bl	80041fa <__malloc_unlock>
 8004142:	f104 000b 	add.w	r0, r4, #11
 8004146:	1d23      	adds	r3, r4, #4
 8004148:	f020 0007 	bic.w	r0, r0, #7
 800414c:	1ac3      	subs	r3, r0, r3
 800414e:	d0d3      	beq.n	80040f8 <_malloc_r+0x20>
 8004150:	425a      	negs	r2, r3
 8004152:	50e2      	str	r2, [r4, r3]
 8004154:	e7d0      	b.n	80040f8 <_malloc_r+0x20>
 8004156:	428c      	cmp	r4, r1
 8004158:	684b      	ldr	r3, [r1, #4]
 800415a:	bf16      	itet	ne
 800415c:	6063      	strne	r3, [r4, #4]
 800415e:	6013      	streq	r3, [r2, #0]
 8004160:	460c      	movne	r4, r1
 8004162:	e7eb      	b.n	800413c <_malloc_r+0x64>
 8004164:	460c      	mov	r4, r1
 8004166:	6849      	ldr	r1, [r1, #4]
 8004168:	e7cc      	b.n	8004104 <_malloc_r+0x2c>
 800416a:	1cc4      	adds	r4, r0, #3
 800416c:	f024 0403 	bic.w	r4, r4, #3
 8004170:	42a0      	cmp	r0, r4
 8004172:	d005      	beq.n	8004180 <_malloc_r+0xa8>
 8004174:	1a21      	subs	r1, r4, r0
 8004176:	4630      	mov	r0, r6
 8004178:	f000 f82e 	bl	80041d8 <_sbrk_r>
 800417c:	3001      	adds	r0, #1
 800417e:	d0cf      	beq.n	8004120 <_malloc_r+0x48>
 8004180:	6025      	str	r5, [r4, #0]
 8004182:	e7db      	b.n	800413c <_malloc_r+0x64>
 8004184:	200000b0 	.word	0x200000b0
 8004188:	200000b4 	.word	0x200000b4

0800418c <_realloc_r>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	4607      	mov	r7, r0
 8004190:	4614      	mov	r4, r2
 8004192:	460e      	mov	r6, r1
 8004194:	b921      	cbnz	r1, 80041a0 <_realloc_r+0x14>
 8004196:	4611      	mov	r1, r2
 8004198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800419c:	f7ff bf9c 	b.w	80040d8 <_malloc_r>
 80041a0:	b922      	cbnz	r2, 80041ac <_realloc_r+0x20>
 80041a2:	f7ff ff4b 	bl	800403c <_free_r>
 80041a6:	4625      	mov	r5, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ac:	f000 f826 	bl	80041fc <_malloc_usable_size_r>
 80041b0:	42a0      	cmp	r0, r4
 80041b2:	d20f      	bcs.n	80041d4 <_realloc_r+0x48>
 80041b4:	4621      	mov	r1, r4
 80041b6:	4638      	mov	r0, r7
 80041b8:	f7ff ff8e 	bl	80040d8 <_malloc_r>
 80041bc:	4605      	mov	r5, r0
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0f2      	beq.n	80041a8 <_realloc_r+0x1c>
 80041c2:	4631      	mov	r1, r6
 80041c4:	4622      	mov	r2, r4
 80041c6:	f7ff ff15 	bl	8003ff4 <memcpy>
 80041ca:	4631      	mov	r1, r6
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff ff35 	bl	800403c <_free_r>
 80041d2:	e7e9      	b.n	80041a8 <_realloc_r+0x1c>
 80041d4:	4635      	mov	r5, r6
 80041d6:	e7e7      	b.n	80041a8 <_realloc_r+0x1c>

080041d8 <_sbrk_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4c06      	ldr	r4, [pc, #24]	; (80041f4 <_sbrk_r+0x1c>)
 80041dc:	2300      	movs	r3, #0
 80041de:	4605      	mov	r5, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	f7ff fb3a 	bl	800385c <_sbrk>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d102      	bne.n	80041f2 <_sbrk_r+0x1a>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	b103      	cbz	r3, 80041f2 <_sbrk_r+0x1a>
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	200001c4 	.word	0x200001c4

080041f8 <__malloc_lock>:
 80041f8:	4770      	bx	lr

080041fa <__malloc_unlock>:
 80041fa:	4770      	bx	lr

080041fc <_malloc_usable_size_r>:
 80041fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004200:	1f18      	subs	r0, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfbc      	itt	lt
 8004206:	580b      	ldrlt	r3, [r1, r0]
 8004208:	18c0      	addlt	r0, r0, r3
 800420a:	4770      	bx	lr

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
